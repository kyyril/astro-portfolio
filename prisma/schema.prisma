generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  githubId  String   @unique
  username  String
  avatarUrl String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  guestbookEntries GuestbookEntry[]
  messages         Message[]
  replies          Reply[] @relation(name: "ReplyAuthor")
  userReplies      Reply[] @relation(name: "ReplyUser")
  likes            Like[]

  @@map("users")
}

model GuestbookEntry {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("guestbook_entries")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies Reply[]
  likes   Like[]
  
  @@map("messages")
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  messageId String
  userId    String

  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade, name: "ReplyAuthor")
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "ReplyUser")
  
  @@map("replies")
}

model Like {
  id        String   @id @default(uuid())
  emote     String
  createdAt DateTime @default(now())
  userId    String
  messageId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@map("likes")
}
