---
// Smooth Scroll 120fps - Ultra Smooth Scrolling Experience
---

<script>
  // Smooth scroll variables
  let isScrolling = false;
  let scrollTarget = 0;
  let scrollCurrent = 0;
  let scrollVelocity = 0;
  let rafId: number;
  
  // Performance monitoring
  let fps = 120;
  let frameCount = 0;
  let lastTime = performance.now();
  
  // Smooth scroll configuration
  const scrollConfig = {
    ease: 0.08, // Smoothness factor (lower = smoother, higher = more responsive)
    friction: 0.92, // Friction for natural deceleration
    threshold: 0.1, // Stop threshold
    wheelMultiplier: 1.2, // Wheel sensitivity
    touchMultiplier: 1.5, // Touch sensitivity
    maxVelocity: 50 // Maximum scroll velocity per frame
  };

  // Initialize smooth scroll
  function initSmoothScroll() {
    // Disable native scroll
    document.body.style.overflow = 'hidden';
    document.documentElement.style.overflow = 'hidden';
    
    // Create scroll container
    createScrollContainer();
    
    // Setup event listeners
    setupScrollListeners();
    
    // Start smooth scroll loop
    startSmoothScrollLoop();
    
    // Monitor performance
    monitorScrollPerformance();
  }

  function createScrollContainer() {
    // Wrap content in scroll container
    const body = document.body;
    const scrollContainer = document.createElement('div');
    scrollContainer.id = 'smooth-scroll-container';
    scrollContainer.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
      will-change: transform;
      transform: translateZ(0);
    `;
    
    // Move all body content to scroll container
    while (body.firstChild) {
      scrollContainer.appendChild(body.firstChild);
    }
    
    body.appendChild(scrollContainer);
    
    // Set initial scroll position
    scrollCurrent = scrollTarget = window.scrollY || 0;
  }

  function setupScrollListeners() {
    // Wheel event for desktop
    window.addEventListener('wheel', handleWheel, { passive: false });
    
    // Touch events for mobile
    let touchStartY = 0;
    let touchStartTime = 0;
    
    window.addEventListener('touchstart', (e) => {
      touchStartY = e.touches[0].clientY;
      touchStartTime = Date.now();
    }, { passive: true });
    
    window.addEventListener('touchmove', (e) => {
      e.preventDefault();
      const touchY = e.touches[0].clientY;
      const deltaY = (touchStartY - touchY) * scrollConfig.touchMultiplier;
      
      scrollTarget += deltaY;
      touchStartY = touchY;
      
      // Clamp scroll target
      clampScrollTarget();
    }, { passive: false });
    
    // Keyboard navigation
    window.addEventListener('keydown', handleKeyboard);
    
    // Handle anchor links
    setupAnchorLinks();
  }

  function handleWheel(e: WheelEvent) {
    e.preventDefault();
    
    // Normalize wheel delta
    let deltaY = e.deltaY;
    
    // Handle different wheel modes
    if (e.deltaMode === 1) { // Line mode
      deltaY *= 16;
    } else if (e.deltaMode === 2) { // Page mode
      deltaY *= window.innerHeight;
    }
    
    // Apply multiplier and add to target
    scrollTarget += deltaY * scrollConfig.wheelMultiplier;
    
    // Clamp scroll target
    clampScrollTarget();
  }

  function handleKeyboard(e: KeyboardEvent) {
    const scrollAmount = window.innerHeight * 0.8;
    
    switch (e.key) {
      case 'ArrowDown':
      case 'PageDown':
        e.preventDefault();
        scrollTarget += scrollAmount;
        break;
      case 'ArrowUp':
      case 'PageUp':
        e.preventDefault();
        scrollTarget -= scrollAmount;
        break;
      case 'Home':
        e.preventDefault();
        scrollTarget = 0;
        break;
      case 'End':
        e.preventDefault();
        scrollTarget = getMaxScroll();
        break;
      case ' ':
        e.preventDefault();
        scrollTarget += e.shiftKey ? -scrollAmount : scrollAmount;
        break;
    }
    
    clampScrollTarget();
  }

  function setupAnchorLinks() {
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const link = target.closest('a[href^="#"]') as HTMLAnchorElement;
      
      if (link) {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = targetId ? document.getElementById(targetId) : null;
        
        if (targetElement) {
          const container = document.getElementById('smooth-scroll-container');
          if (container) {
            const rect = targetElement.getBoundingClientRect();
            const containerRect = container.getBoundingClientRect();
            scrollTarget = scrollCurrent + rect.top - containerRect.top - 80; // 80px offset
            clampScrollTarget();
          }
        }
      }
    });
  }

  function clampScrollTarget() {
    const maxScroll = getMaxScroll();
    scrollTarget = Math.max(0, Math.min(scrollTarget, maxScroll));
  }

  function getMaxScroll() {
    const container = document.getElementById('smooth-scroll-container');
    if (!container) return 0;
    return Math.max(0, container.scrollHeight - window.innerHeight);
  }

  function startSmoothScrollLoop() {
    function smoothScrollTick() {
      // Calculate smooth scroll
      const delta = scrollTarget - scrollCurrent;
      
      if (Math.abs(delta) > scrollConfig.threshold) {
        // Apply easing
        scrollVelocity += delta * scrollConfig.ease;
        
        // Apply friction
        scrollVelocity *= scrollConfig.friction;
        
        // Clamp velocity
        scrollVelocity = Math.max(-scrollConfig.maxVelocity, 
                                 Math.min(scrollConfig.maxVelocity, scrollVelocity));
        
        // Update current position
        scrollCurrent += scrollVelocity;
        
        // Apply transform
        const container = document.getElementById('smooth-scroll-container');
        if (container) {
          container.style.transform = `translate3d(0, ${-scrollCurrent}px, 0)`;
        }
        
        // Update window scroll position for other scripts
        window.history.replaceState(null, '', `${window.location.pathname}${window.location.search}#scroll=${Math.round(scrollCurrent)}`);
        
        isScrolling = true;
      } else {
        // Stop scrolling when close enough
        scrollCurrent = scrollTarget;
        scrollVelocity = 0;
        isScrolling = false;
      }
      
      rafId = requestAnimationFrame(smoothScrollTick);
    }
    
    smoothScrollTick();
  }

  function monitorScrollPerformance() {
    function measureFPS() {
      frameCount++;
      const currentTime = performance.now();
      
      if (currentTime - lastTime >= 500) { // Check every 500ms
        fps = Math.round((frameCount * 2000) / (currentTime - lastTime));
        frameCount = 0;
        lastTime = currentTime;
        
        // Adaptive quality based on FPS
        if (fps < 90) {
          // Reduce smoothness for better performance
          scrollConfig.ease = 0.12;
          scrollConfig.friction = 0.88;
        } else if (fps >= 110) {
          // Increase smoothness for high-end devices
          scrollConfig.ease = 0.06;
          scrollConfig.friction = 0.94;
        }
        
        // Update performance display if exists
        const fpsDisplay = document.getElementById('scroll-fps');
        if (fpsDisplay) {
          fpsDisplay.textContent = `${fps} fps`;
          fpsDisplay.style.color = fps >= 100 ? '#10b981' : fps >= 60 ? '#f59e0b' : '#ef4444';
        }
      }
      
      requestAnimationFrame(measureFPS);
    }
    
    measureFPS();
  }

  // Resize handler
  function handleResize() {
    clampScrollTarget();
    scrollCurrent = Math.min(scrollCurrent, getMaxScroll());
    scrollTarget = scrollCurrent;
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Small delay to ensure all content is loaded
    setTimeout(initSmoothScroll, 100);
  });

  document.addEventListener('astro:page-load', () => {
    setTimeout(initSmoothScroll, 100);
  });

  // Cleanup
  function cleanup() {
    if (rafId) {
      cancelAnimationFrame(rafId);
    }
    
    // Restore native scroll
    document.body.style.overflow = '';
    document.documentElement.style.overflow = '';
    
    // Remove event listeners
    window.removeEventListener('wheel', handleWheel);
    window.removeEventListener('keydown', handleKeyboard);
    window.removeEventListener('resize', handleResize);
  }

  window.addEventListener('resize', handleResize);
  document.addEventListener('astro:before-preparation', cleanup);
  window.addEventListener('beforeunload', cleanup);

  // Expose scroll API for external use
  (window as any).smoothScroll = {
    scrollTo: (target: number) => {
      scrollTarget = target;
      clampScrollTarget();
    },
    scrollBy: (delta: number) => {
      scrollTarget += delta;
      clampScrollTarget();
    },
    getCurrentScroll: () => scrollCurrent,
    getTargetScroll: () => scrollTarget,
    isScrolling: () => isScrolling
  };
</script>

<style>
  /* Smooth scroll optimizations */
  html {
    scroll-behavior: auto !important;
  }
  
  body {
    overflow: hidden;
  }
  
  #smooth-scroll-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    min-height: 100%;
    will-change: transform;
    transform: translateZ(0);
    backface-visibility: hidden;
  }
  
  /* Optimize elements for smooth scrolling */
  * {
    transform-style: flat;
  }
  
  /* Performance optimizations */
  img, video {
    transform: translateZ(0);
  }
  
  /* Disable text selection during scroll */
  body.scrolling {
    user-select: none;
    pointer-events: none;
  }
  
  body.scrolling * {
    pointer-events: none;
  }
  
  /* Scroll performance indicator */
  #scroll-performance {
    position: fixed;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-family: monospace;
    font-size: 12px;
    z-index: 10000;
    pointer-events: none;
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    #smooth-scroll-container {
      /* Reduce transform precision on mobile for better performance */
      transform-style: flat;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    #smooth-scroll-container {
      transform: none !important;
    }
  }
</style>

<!-- Performance indicator -->
<div id="scroll-performance" style="display: none;">
  Scroll: <span id="scroll-fps">120 fps</span>
</div>
