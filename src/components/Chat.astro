---
// No server-side logic needed for this component
---

<div id="chat-app" class="chat-container max-w-7xl w-full min-h-screen px-4 md:px-8 mx-auto">
  <div class="flex flex-col md:flex-row gap-4 min-h-screen py-4">

    <!-- Mobile Menu Button -->
    <button id="mobile-menu-btn" class="md:hidden fixed top-4 left-4 z-50 chat-btn-secondary p-2 rounded-lg">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    <!-- Chat History Sidebar -->
    <div id="chat-sidebar" class="fixed md:relative inset-y-0 top-0 left-0 z-40 w-64 chat-sidebar transition-transform transform -translate-x-full md:translate-x-0 md:flex md:flex-col min-h-screen">
      <div class="flex flex-col min-h-screen">
        <div class="chat-sidebar-header p-4">
          <h2 class="text-lg font-semibold text-text">Chat History</h2>
          <p class="text-xs text-secondary mt-1">
            <span style="color: var(--color-error);">*</span> Saved in browser storage
          </p>
        </div>

        <div class="p-4">
          <button id="new-chat-btn" class="w-full chat-new-btn py-2 px-4 rounded-lg flex items-center justify-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            New Chat
          </button>
        </div>

        <div class="flex-1 overflow-y-auto px-4 pb-4">
          <div id="chat-history" class="space-y-2">
            <p class="text-sm text-secondary text-center py-8">No chat history yet</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Overlay for mobile -->
    <div id="sidebar-overlay" class="chat-overlay fixed inset-0 z-30 md:hidden hidden"></div>

    <!-- Main Chat Area -->
    <div class="flex-1  flex flex-col min-h-screen md:ml-0 ml-0">
      
      <!-- Chat Header -->
      <header class="chat-header flex items-center p-4">
        <button id="avatar-btn" class="flex-shrink-0">
          <img
            src="https://i.pinimg.com/736x/f7/19/5c/f7195c01f50c2d9c95b4a9fafe92fa88.jpg"
            alt="Katou"
            class="chat-avatar w-12 h-12 rounded-full cursor-pointer"
          />
        </button>

        <div class="ml-3 flex-1">
          <h1 class="text-lg font-light text-text">Âä†Ëó§ ÊÅµ</h1>
          <p class="text-sm text-accent">Online</p>
        </div>

        <button id="header-new-chat" class="chat-btn-secondary px-3 py-1 rounded-lg text-sm flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
          <span class="hidden sm:inline">New</span>
        </button>
      </header>

      <!-- Messages Container -->
      <div id="messages-container" class="flex-1 overflow-y-auto p-4 space-y-4">
        <div class="flex justify-start animate-fadeIn">
          <div class="chat-message chat-message-ai max-w-[85%] p-3">
            <p>How can I help you today?</p>
          </div>
        </div>
      </div>

      <!-- Input Section -->
      <div class="chat-input-container p-4">
        <div class="flex gap-2">
          <input
            id="message-input"
            type="text"
            placeholder="Ask something..."
            class="flex-1 chat-input px-4 py-2"
            disabled
          />
          <button
            id="send-btn"
            class="chat-send-btn px-4 py-2 flex items-center justify-center"
            disabled
          >
            <svg id="send-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
            <svg id="loading-icon" class="w-5 h-5 animate-spin hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Avatar Modal -->
<div id="avatar-modal" class="chat-overlay fixed inset-0 z-50 hidden flex items-center justify-center p-4">
  <div class="chat-modal p-4 rounded-xl max-w-md">
    <img src="https://i.pinimg.com/736x/f7/19/5c/f7195c01f50c2d9c95b4a9fafe92fa88.jpg" alt="Katou" class="w-full rounded-lg" />
    <button id="close-modal" class="mt-4 w-full chat-btn-secondary py-2 rounded-lg">
      Close
    </button>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="chat-overlay fixed inset-0 z-50 hidden flex items-center justify-center p-4">
  <div class="chat-modal p-6 rounded-xl max-w-sm w-full">
    <h3 class="text-lg font-semibold text-text mb-2">Delete Chat?</h3>
    <p class="text-secondary mb-4">This will permanently delete this chat history. This action cannot be undone.</p>
    <div class="flex gap-2">
      <button id="cancel-delete" class="flex-1 chat-btn-secondary py-2 rounded-lg">
        Cancel
      </button>
      <button id="confirm-delete" class="flex-1 chat-btn-danger py-2 rounded-lg">
        Delete
      </button>
    </div>
  </div>
</div>

<script>
  import { GeminiService } from '../services/gemini';
  import { StorageService } from '../services/storage';
  import { extractChatTitle, formatDate, generateMessageId, generateChatId, parseMarkdown } from '../utils/chat';
  import type { Message, ChatHistory, GeminiMessage } from '../types/chat';

  class ChatApp {
    private geminiService!: GeminiService;
    private userId: string = '';
    private messages: Message[] = [];
    private aiHistory: GeminiMessage[] = [];
    private savedChats: ChatHistory[] = [];
    private activeChat: string | null = null;
    private chatToDelete: string | null = null;
    private isLoading = false;

    constructor() {
      // Initialize Gemini service - replace with your API key
      const apiKey = import.meta.env.PUBLIC_GEMINI_API_KEY;
      if (!apiKey) {
        console.error('Gemini API key not found. Please set PUBLIC_GEMINI_API_KEY in your .env file');
        return;
      }
      
      this.geminiService = new GeminiService(apiKey);
      this.init();
    }

    private init() {
      this.userId = StorageService.getUserId();
      this.loadSavedChats();
      this.setupEventListeners();
      this.initializeChat();
      this.updateUI();
    }

    private loadSavedChats() {
      this.savedChats = StorageService.loadChats(this.userId);
      this.renderChatHistory();
    }

    private initializeChat() {
      this.messages = [{
        text: "How can I help you today?",
        isUser: false,
        id: generateMessageId()
      }];
      
      this.aiHistory = [{
        role: 'user',
        parts: [{
          text: "You're Katou, an AI chatbot, built by none other than Khairil or as we call him, Kiril. He's just a handsome and smart guy who loves computer science and philosophy, all while being endlessly inspired by the quirks of the universe. üõ∏ Pretty awesome, right?"
        }]
      }];
    }

    private setupEventListeners() {
      // Mobile menu
      const mobileMenuBtn = document.getElementById('mobile-menu-btn');
      const sidebar = document.getElementById('chat-sidebar');
      const overlay = document.getElementById('sidebar-overlay');
      
      mobileMenuBtn?.addEventListener('click', () => this.toggleSidebar());
      overlay?.addEventListener('click', () => this.closeSidebar());

      // New chat buttons
      document.getElementById('new-chat-btn')?.addEventListener('click', () => {
        this.startNewChat();
        this.closeSidebar();
      });
      
      document.getElementById('header-new-chat')?.addEventListener('click', () => this.startNewChat());

      // Message input
      const messageInput = document.getElementById('message-input') as HTMLInputElement;
      const sendBtn = document.getElementById('send-btn') as HTMLButtonElement;
      
      messageInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !this.isLoading) {
          this.sendMessage();
        }
      });
      
      sendBtn?.addEventListener('click', () => {
        if (!this.isLoading) this.sendMessage();
      });

      // Avatar modal
      document.getElementById('avatar-btn')?.addEventListener('click', () => this.showAvatarModal());
      document.getElementById('close-modal')?.addEventListener('click', () => this.hideAvatarModal());
      document.getElementById('avatar-modal')?.addEventListener('click', (e) => {
        if (e.target === e.currentTarget) this.hideAvatarModal();
      });

      // Delete modal
      document.getElementById('cancel-delete')?.addEventListener('click', () => this.hideDeleteModal());
      document.getElementById('confirm-delete')?.addEventListener('click', () => this.confirmDelete());
      document.getElementById('delete-modal')?.addEventListener('click', (e) => {
        if (e.target === e.currentTarget) this.hideDeleteModal();
      });
    }

    private toggleSidebar() {
      const sidebar = document.getElementById('chat-sidebar');
      const overlay = document.getElementById('sidebar-overlay');
      
      sidebar?.classList.toggle('-translate-x-full');
      overlay?.classList.toggle('hidden');
    }

    private closeSidebar() {
      const sidebar = document.getElementById('chat-sidebar');
      const overlay = document.getElementById('sidebar-overlay');
      
      sidebar?.classList.add('-translate-x-full');
      overlay?.classList.add('hidden');
    }

    private async sendMessage() {
      const messageInput = document.getElementById('message-input') as HTMLInputElement;
      const message = messageInput.value.trim();
      
      if (!message || this.isLoading) return;

      // Add user message
      const userMessage: Message = {
        text: message,
        isUser: true,
        id: generateMessageId()
      };
      
      this.messages.push(userMessage);
      this.renderMessages();
      
      // Clear input and set loading state
      messageInput.value = '';
      this.setLoading(true);

      // Add to AI history
      this.aiHistory.push({
        role: 'user',
        parts: [{ text: message }]
      });

      try {
        // Create AI message placeholder
        const aiMessage: Message = {
          text: '',
          isUser: false,
          id: generateMessageId()
        };
        
        this.messages.push(aiMessage);
        this.renderMessages();

        console.log("Sending message to Gemini API...");
        
        try {
          // Use the non-streaming approach first to handle the array response
          const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${import.meta.env.PUBLIC_GEMINI_API_KEY}`;
          
          const requestBody = {
            contents: this.aiHistory.map((msg) => ({
              role: msg.role === "model" ? "model" : "user",
              parts: msg.parts,
            })),
            generationConfig: {
              temperature: 1,
              topK: 40,
              topP: 0.95,
              maxOutputTokens: 8192,
            },
          };
          
          console.log("Sending request to Gemini API");
          const response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestBody),
          });
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const responseText = await response.text();
          console.log("Received response from Gemini API:", responseText);
          
          let fullText = "";
          
          // Check if the response is an array
          if (responseText.trim().startsWith("[")) {
            const dataArray = JSON.parse(responseText);
            
            // Combine all text parts from the array
            for (const data of dataArray) {
              if (data.candidates && data.candidates[0]?.content?.parts[0]?.text) {
                fullText += data.candidates[0].content.parts[0].text;
              }
            }
            
            console.log("Combined full text:", fullText);
          } else {
            // Handle single response object
            try {
              const data = JSON.parse(responseText);
              if (data.candidates && data.candidates[0]?.content?.parts[0]?.text) {
                fullText = data.candidates[0].content.parts[0].text;
              }
            } catch (e) {
              console.error("Error parsing JSON response:", e);
              fullText = "Sorry, I encountered an error processing the response.";
            }
          }
          
          // Update the last message with the full text
          this.messages[this.messages.length - 1].text = fullText;
          this.renderMessages();
          
          // Add to AI history
          this.aiHistory.push({
            role: 'model',
            parts: [{ text: fullText }]
          });
          
        } catch (apiError) {
          console.error("API Error:", apiError);
          
          // Fall back to streaming approach
          let responseText = '';
          try {
            const stream = this.geminiService.streamGenerateContent(this.aiHistory);
            
            for await (const chunk of stream) {
              console.log("Received chunk:", chunk);
              responseText += chunk;
              // Update the last message
              this.messages[this.messages.length - 1].text = responseText;
              this.renderMessages();
            }
            
            // Add to AI history
            this.aiHistory.push({
              role: 'model',
              parts: [{ text: responseText }]
            });
            
          } catch (streamError) {
            console.error("Stream error:", streamError);
            this.messages[this.messages.length - 1].text = "Sorry, I encountered an error. Please try again.";
            this.renderMessages();
          }
        }

        // Save chat
        this.saveCurrentChat();
        
      } catch (error) {
        console.error('Error:', error);
        this.messages.push({
          text: 'Sorry, I encountered an error. Please try again.',
          isUser: false,
          id: generateMessageId()
        });
        this.renderMessages();
      } finally {
        this.setLoading(false);
      }
    }

    private setLoading(loading: boolean) {
      this.isLoading = loading;
      const sendBtn = document.getElementById('send-btn') as HTMLButtonElement;
      const messageInput = document.getElementById('message-input') as HTMLInputElement;
      const sendIcon = document.getElementById('send-icon');
      const loadingIcon = document.getElementById('loading-icon');
      
      if (sendBtn) sendBtn.disabled = loading;
      if (messageInput) messageInput.disabled = loading;
      
      if (loading) {
        sendIcon?.classList.add('hidden');
        loadingIcon?.classList.remove('hidden');
      } else {
        sendIcon?.classList.remove('hidden');
        loadingIcon?.classList.add('hidden');
      }
    }

    private renderMessages() {
      const container = document.getElementById('messages-container');
      if (!container) return;

      container.innerHTML = this.messages.map(msg => `
        <div class="flex ${msg.isUser ? 'justify-end' : 'justify-start'} animate-fadeIn">
          <div class="chat-message ${msg.isUser
            ? 'chat-message-user'
            : 'chat-message-ai'
          } max-w-[85%] p-3">
            <div class="prose prose-invert max-w-none text-sm">
              ${parseMarkdown(msg.text)}
            </div>
          </div>
        </div>
      `).join('');

      // Scroll to bottom
      container.scrollTop = container.scrollHeight;
    }

    private renderChatHistory() {
      const container = document.getElementById('chat-history');
      if (!container) return;

      if (this.savedChats.length === 0) {
        container.innerHTML = '<p class="text-sm text-secondary text-center py-8">No chat history yet</p>';
        return;
      }

      container.innerHTML = this.savedChats.map(chat => `
        <div class="chat-history-item ${this.activeChat === chat.id ? 'active' : ''} rounded-lg p-3 group" data-chat-id="${chat.id}">
          <div class="flex items-center justify-between">
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-text truncate">${chat.title}</p>
              <p class="text-xs text-secondary">${formatDate(chat.timestamp)}</p>
            </div>
            <button class="chat-delete-btn opacity-0 group-hover:opacity-100 p-1 transition-all" data-chat-id="${chat.id}">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        </div>
      `).join('');

      // Add event listeners to chat items
      container.querySelectorAll('.chat-item').forEach(item => {
        item.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (!target.closest('.delete-chat-btn')) {
            const chatId = (item as HTMLElement).dataset.chatId;
            if (chatId) {
              this.loadChat(chatId);
              this.closeSidebar();
            }
          }
        });
      });

      // Add event listeners to delete buttons
      container.querySelectorAll('.delete-chat-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          const chatId = (btn as HTMLElement).dataset.chatId;
          if (chatId) this.showDeleteModal(chatId);
        });
      });
    }

    private startNewChat() {
      // Save current chat if there are messages
      if (this.messages.length > 1) {
        this.saveCurrentChat();
      }

      // Reset chat
      this.initializeChat();
      this.activeChat = null;
      this.renderMessages();
      this.updateUI();
      
      // Clear input
      const messageInput = document.getElementById('message-input') as HTMLInputElement;
      if (messageInput) messageInput.value = '';
    }

    private loadChat(chatId: string) {
      const chat = this.savedChats.find(c => c.id === chatId);
      if (!chat) return;

      this.messages = chat.messages.map(msg => ({
        ...msg,
        id: msg.id || generateMessageId()
      }));
      
      this.aiHistory = chat.aiHistory || [];
      this.activeChat = chatId;
      
      this.renderMessages();
      this.renderChatHistory();
      this.updateUI();
    }

    private saveCurrentChat() {
      if (this.messages.length <= 1) return;

      const chatId = this.activeChat || generateChatId();
      let title: string;

      if (this.activeChat) {
        const existingChat = this.savedChats.find(chat => chat.id === this.activeChat);
        title = existingChat?.title || extractChatTitle(this.messages);
      } else {
        title = extractChatTitle(this.messages);
      }

      const chatToSave: ChatHistory = {
        id: chatId,
        title,
        messages: this.messages,
        timestamp: Date.now(),
        aiHistory: this.aiHistory,
        userId: this.userId
      };

      this.savedChats = StorageService.updateChat(this.userId, chatToSave);
      this.activeChat = chatId;
      this.renderChatHistory();
    }

    private showDeleteModal(chatId: string) {
      this.chatToDelete = chatId;
      const modal = document.getElementById('delete-modal');
      modal?.classList.remove('hidden');
    }

    private hideDeleteModal() {
      this.chatToDelete = null;
      const modal = document.getElementById('delete-modal');
      modal?.classList.add('hidden');
    }

    private confirmDelete() {
      if (!this.chatToDelete) return;

      this.savedChats = StorageService.deleteChat(this.userId, this.chatToDelete);
      
      if (this.activeChat === this.chatToDelete) {
        this.startNewChat();
      }
      
      this.renderChatHistory();
      this.hideDeleteModal();
    }

    private showAvatarModal() {
      const modal = document.getElementById('avatar-modal');
      modal?.classList.remove('hidden');
    }

    private hideAvatarModal() {
      const modal = document.getElementById('avatar-modal');
      modal?.classList.add('hidden');
    }

    private updateUI() {
      const messageInput = document.getElementById('message-input') as HTMLInputElement;
      const sendBtn = document.getElementById('send-btn') as HTMLButtonElement;
      
      if (messageInput && sendBtn) {
        messageInput.disabled = false;
        sendBtn.disabled = false;
      }
    }
  }

  // Initialize the app when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ChatApp();
  });
</script>
