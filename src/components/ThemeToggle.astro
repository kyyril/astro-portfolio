---
import { themes } from '../config/themes';
---

<div class="relative">
  <button id="theme-toggle" class="p-2 rounded-lg glass hover:bg-[var(--color-surface)] transition-colors">
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
            d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5H9M21 9H9M21 13H9M21 17H9M21 21H9">
      </path>
    </svg>
  </button>
  
  <div id="theme-dropdown" class="absolute right-0 mt-2 w-48 glass rounded-lg shadow-lg hidden">
    <div class="py-2">
      {Object.entries(themes).map(([key, theme]) => (
        <button 
          class="theme-option w-full text-left px-4 py-2 hover:bg-[var(--color-surface)] transition-colors"
          data-theme={key}
        >
          {theme.displayName}
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  const themeDropdown = document.getElementById('theme-dropdown');
  const themeOptions = document.querySelectorAll('.theme-option');

  themeToggle?.addEventListener('click', () => {
    themeDropdown?.classList.toggle('hidden');
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!themeToggle?.contains(e.target as Node) && !themeDropdown?.contains(e.target as Node)) {
      themeDropdown?.classList.add('hidden');
    }
  });

  themeOptions.forEach(option => {
    option.addEventListener('click', () => {
      const themeName = option.getAttribute('data-theme');
      if (themeName && window.switchTheme) {
        window.switchTheme(themeName);
        themeDropdown?.classList.add('hidden');
      }
    });
  });
</script>