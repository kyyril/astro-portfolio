---
// src/components/Starfield.astro
---
<canvas id="starfield-canvas" class="starfield-canvas"></canvas>

<style>
  .starfield-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: -1; /* Pastikan di belakang konten lain */
    background-color: #000; /* Atau warna gelap lainnya */
  }
</style>

<script is:inline>
  // JavaScript untuk Starfield (akan dijelaskan di bawah)
  const canvas = document.getElementById('starfield-canvas');
  const ctx = canvas.getContext('2d');

  let stars = [];
  let shootingStars = [];
  const numStars = 250; // Optimal untuk performa ringan
  const SHOOTING_STAR_MIN_INTERVAL = 1000;
  const SHOOTING_STAR_MAX_INTERVAL = 5000;
  let lastShootingStarTime = 0;

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  resizeCanvas();
  window.addEventListener('resize', resizeCanvas);

  class Star {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.radius = Math.random() * 1.5 + 0.5;
      this.opacity = Math.random();
      this.twinkleSpeed = Math.random() * 0.02 + 0.01;
      this.direction = Math.random() > 0.5 ? 1 : -1;
    }

    draw() {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
      ctx.fill();
    }

    update() {
      this.opacity += this.direction * this.twinkleSpeed;
      if (this.opacity > 1 || this.opacity < 0) {
        this.direction *= -1;
      }
    }
  }

  class ShootingStar {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = (Math.random() * canvas.height) / 4;
      this.length = Math.random() * 80 + 40;
      this.speed = Math.random() * 6 + 4;
      this.opacity = 0.5;
      this.angle = Math.PI / 4 + ((Math.random() * Math.PI) / 8) * (Math.random() > 0.5 ? 1 : -1);

      if (Math.random() > 0.5) {
        this.x = canvas.width - this.x;
        this.angle = Math.PI - this.angle;
      }
    }

    draw() {
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(
        this.x + Math.cos(this.angle) * this.length,
        this.y + Math.sin(this.angle) * this.length
      );
      ctx.strokeStyle = `rgba(255, 255, 255, ${this.opacity})`;
      ctx.lineWidth = 1.5;
      ctx.stroke();
    }

    update() {
      this.x += Math.cos(this.angle) * this.speed;
      this.y += Math.sin(this.angle) * this.speed;
      this.opacity -= 0.015;

      return (
        this.opacity <= 0 ||
        this.x < 0 ||
        this.x > canvas.width ||
        this.y > canvas.height
      );
    }
  }

  function initStars() {
    stars = [];
    for (let i = 0; i < numStars; i++) {
      stars.push(new Star());
    }
  }

  initStars();

  function animate(currentTime) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    stars.forEach((star) => {
      star.update();
      star.draw();
    });

    if (
      currentTime - lastShootingStarTime >
      SHOOTING_STAR_MIN_INTERVAL +
        Math.random() * (SHOOTING_STAR_MAX_INTERVAL - SHOOTING_STAR_MIN_INTERVAL)
    ) {
      shootingStars.push(new ShootingStar());
      lastShootingStarTime = currentTime;
    }

    shootingStars = shootingStars.filter((ss) => {
      ss.draw();
      return !ss.update();
    });

    requestAnimationFrame(animate);
  }

  requestAnimationFrame(animate);
</script>
