---
// Advanced GSAP Scroll Effects for Performance
---

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  import { ScrollToPlugin } from 'gsap/ScrollToPlugin';

  gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

  document.addEventListener('DOMContentLoaded', () => {
    initScrollEffects();
  });

  document.addEventListener('astro:page-load', () => {
    initScrollEffects();
  });

  function initScrollEffects() {
    // Parallax effects for background elements
    setupParallaxEffects();
    
    // Reveal animations
    setupRevealAnimations();
    
    // Progress indicators
    setupProgressIndicators();
    
    // Magnetic effects for interactive elements
    setupMagneticEffects();
    
    // Performance monitoring
    setupPerformanceMonitoring();
  }

  function setupParallaxEffects() {
    // Subtle parallax for background elements
    gsap.utils.toArray('.parallax-bg').forEach((element) => {
      gsap.to(element, {
        yPercent: -50,
        ease: "none",
        scrollTrigger: {
          trigger: element,
          start: "top bottom",
          end: "bottom top",
          scrub: 1
        }
      });
    });

    // Parallax for cards
    gsap.utils.toArray('.parallax-card').forEach((card) => {
      gsap.to(card, {
        y: -30,
        ease: "none",
        scrollTrigger: {
          trigger: card,
          start: "top bottom",
          end: "bottom top",
          scrub: 2
        }
      });
    });
  }

  function setupRevealAnimations() {
    // Reveal animation for sections
    gsap.utils.toArray('.reveal-section').forEach((section) => {
      const timeline = gsap.timeline({
        scrollTrigger: {
          trigger: section,
          start: "top 80%",
          end: "bottom 20%",
          toggleActions: "play none none reverse"
        }
      });

      // Find child elements to animate
      const heading = section.querySelector('h1, h2, h3, h4, h5, h6');
      const content = section.querySelectorAll('p, .content-item');
      const buttons = section.querySelectorAll('button, .btn, a.button');

      if (heading) {
        timeline.fromTo(heading, 
          { opacity: 0, y: 30, skewY: 2 },
          { opacity: 1, y: 0, skewY: 0, duration: 0.8, ease: "power2.out" }
        );
      }

      if (content.length > 0) {
        timeline.fromTo(content, 
          { opacity: 0, y: 20 },
          { 
            opacity: 1, 
            y: 0, 
            duration: 0.6, 
            stagger: 0.1,
            ease: "power2.out" 
          },
          "-=0.4"
        );
      }

      if (buttons.length > 0) {
        timeline.fromTo(buttons, 
          { opacity: 0, scale: 0.8 },
          { 
            opacity: 1, 
            scale: 1, 
            duration: 0.5, 
            stagger: 0.1,
            ease: "back.out(1.7)" 
          },
          "-=0.3"
        );
      }
    });

    // Stagger reveal for grid items
    gsap.utils.toArray('.grid-reveal').forEach((grid) => {
      const items = grid.querySelectorAll('.grid-item, .project-card, .terminal-card');
      
      gsap.fromTo(items,
        { 
          opacity: 0, 
          y: 50,
          scale: 0.9
        },
        {
          opacity: 1,
          y: 0,
          scale: 1,
          duration: 0.8,
          stagger: {
            amount: 0.6,
            from: "start",
            ease: "power2.out"
          },
          ease: "power2.out",
          scrollTrigger: {
            trigger: grid,
            start: "top 85%",
            toggleActions: "play none none reverse"
          }
        }
      );
    });
  }

  function setupProgressIndicators() {
    // Reading progress bar
    const progressBar = document.createElement('div');
    progressBar.className = 'reading-progress';
    progressBar.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 0%;
      height: 3px;
      background: linear-gradient(90deg, var(--color-primary), var(--color-accent));
      z-index: 10000;
      transform-origin: left;
    `;
    document.body.appendChild(progressBar);

    gsap.to(progressBar, {
      width: "100%",
      ease: "none",
      scrollTrigger: {
        trigger: document.body,
        start: "top top",
        end: "bottom bottom",
        scrub: 1
      }
    });

    // Section progress indicators
    gsap.utils.toArray('.section-progress').forEach((section) => {
      const indicator = section.querySelector('.progress-indicator');
      if (indicator) {
        gsap.fromTo(indicator,
          { scaleX: 0 },
          {
            scaleX: 1,
            ease: "none",
            scrollTrigger: {
              trigger: section,
              start: "top center",
              end: "bottom center",
              scrub: 1
            }
          }
        );
      }
    });
  }

  function setupMagneticEffects() {
    // Magnetic effect for buttons and interactive elements
    gsap.utils.toArray('.magnetic').forEach((element) => {
      const magnetic = element;
      const magneticText = magnetic.querySelector('.magnetic-text') || magnetic;

      magnetic.addEventListener('mousemove', (e) => {
        const rect = magnetic.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;

        gsap.to(magnetic, {
          x: x * 0.3,
          y: y * 0.3,
          duration: 0.3,
          ease: "power2.out"
        });

        gsap.to(magneticText, {
          x: x * 0.1,
          y: y * 0.1,
          duration: 0.3,
          ease: "power2.out"
        });
      });

      magnetic.addEventListener('mouseleave', () => {
        gsap.to(magnetic, {
          x: 0,
          y: 0,
          duration: 0.5,
          ease: "elastic.out(1, 0.3)"
        });

        gsap.to(magneticText, {
          x: 0,
          y: 0,
          duration: 0.5,
          ease: "elastic.out(1, 0.3)"
        });
      });
    });

    // Cursor follower effect
    const cursor = document.createElement('div');
    cursor.className = 'custom-cursor';
    cursor.style.cssText = `
      position: fixed;
      width: 20px;
      height: 20px;
      background: var(--color-primary);
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
      mix-blend-mode: difference;
      opacity: 0;
      transform: translate(-50%, -50%);
    `;
    document.body.appendChild(cursor);

    let mouseX = 0, mouseY = 0;
    let cursorX = 0, cursorY = 0;

    document.addEventListener('mousemove', (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
      
      gsap.to(cursor, {
        opacity: 1,
        duration: 0.3
      });
    });

    document.addEventListener('mouseleave', () => {
      gsap.to(cursor, {
        opacity: 0,
        duration: 0.3
      });
    });

    // Smooth cursor animation
    gsap.ticker.add(() => {
      cursorX += (mouseX - cursorX) * 0.1;
      cursorY += (mouseY - cursorY) * 0.1;
      
      gsap.set(cursor, {
        x: cursorX,
        y: cursorY
      });
    });

    // Scale cursor on hover
    document.querySelectorAll('a, button, .clickable').forEach((element) => {
      element.addEventListener('mouseenter', () => {
        gsap.to(cursor, {
          scale: 2,
          duration: 0.3,
          ease: "power2.out"
        });
      });

      element.addEventListener('mouseleave', () => {
        gsap.to(cursor, {
          scale: 1,
          duration: 0.3,
          ease: "power2.out"
        });
      });
    });
  }

  function setupPerformanceMonitoring() {
    // Monitor FPS and adjust animations accordingly
    let fps = 60;
    let lastTime = performance.now();
    let frameCount = 0;

    function measureFPS() {
      frameCount++;
      const currentTime = performance.now();
      
      if (currentTime - lastTime >= 1000) {
        fps = Math.round((frameCount * 1000) / (currentTime - lastTime));
        frameCount = 0;
        lastTime = currentTime;

        // Adjust animation quality based on FPS
        if (fps < 30) {
          // Reduce animation complexity for low-end devices
          gsap.globalTimeline.timeScale(0.8);
          ScrollTrigger.config({ limitCallbacks: true });
        } else if (fps > 50) {
          // Full quality animations for high-end devices
          gsap.globalTimeline.timeScale(1);
        }
      }

      requestAnimationFrame(measureFPS);
    }

    measureFPS();

    // Reduce motion for users who prefer it
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      gsap.globalTimeline.timeScale(0.1);
      ScrollTrigger.config({ limitCallbacks: true });
    }
  }

  // Cleanup function
  function cleanupScrollEffects() {
    ScrollTrigger.getAll().forEach(trigger => trigger.kill());
    gsap.killTweensOf("*");
    
    // Remove custom elements
    const progressBar = document.querySelector('.reading-progress');
    const cursor = document.querySelector('.custom-cursor');
    
    if (progressBar) progressBar.remove();
    if (cursor) cursor.remove();
  }

  document.addEventListener('astro:before-preparation', cleanupScrollEffects);
  window.addEventListener('beforeunload', cleanupScrollEffects);
</script>

<style>
  /* Performance optimizations for GSAP */
  .parallax-bg,
  .parallax-card,
  .magnetic {
    will-change: transform;
    transform: translateZ(0);
  }

  .reveal-section {
    overflow: hidden;
  }

  .grid-reveal .grid-item,
  .grid-reveal .project-card,
  .grid-reveal .terminal-card {
    will-change: transform, opacity;
  }

  /* Custom cursor styles */
  .custom-cursor {
    transition: opacity 0.3s ease;
  }

  /* Reading progress bar */
  .reading-progress {
    transition: width 0.1s ease-out;
  }

  /* Magnetic effect base styles */
  .magnetic {
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .magnetic-text {
    display: inline-block;
    transition: transform 0.3s ease;
  }

  /* Hide default cursor on interactive elements when custom cursor is active */
  @media (hover: hover) {
    .magnetic,
    a,
    button,
    .clickable {
      cursor: none;
    }
  }

  /* Disable custom cursor on touch devices */
  @media (hover: none) {
    .custom-cursor {
      display: none !important;
    }
  }
</style>
