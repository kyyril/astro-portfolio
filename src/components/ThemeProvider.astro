---
import { themes, defaultTheme } from '../config/themes';
---

<script is:inline define:vars={{ themes, defaultTheme }}>
  // Theme management
  function initTheme() {
    const savedTheme = localStorage.getItem('theme') || defaultTheme;
    const theme = themes[savedTheme] || themes[defaultTheme];
    applyTheme(theme);
    
    // Set data attribute for theme
    document.documentElement.setAttribute('data-theme', savedTheme);
  }

  function applyTheme(theme) {
    const root = document.documentElement;
    Object.entries(theme.colors).forEach(([key, value]) => {
      root.style.setProperty(`--color-${key}`, value);
    });

    // Update theme-color meta tag
    const themeColorMeta = document.querySelector('meta[name="theme-color"]');
    if (themeColorMeta) {
      themeColorMeta.setAttribute('content', theme.colors.background);
    } else {
      const meta = document.createElement('meta');
      meta.name = 'theme-color';
      meta.content = theme.colors.background;
      document.head.appendChild(meta);
    }

    // Update RGB variables for background animations
    const hexToRgb = (hex) => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ?
        `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` :
        null;
    };

    root.style.setProperty('--color-primary-rgb', hexToRgb(theme.colors.primary));
    root.style.setProperty('--color-secondary-rgb', hexToRgb(theme.colors.secondary));
    root.style.setProperty('--color-accent-rgb', hexToRgb(theme.colors.accent));
    root.style.setProperty('--color-surface-rgb', hexToRgb(theme.colors.surface));
  }

  function switchTheme(themeName) {
    const theme = themes[themeName];
    if (theme) {
      applyTheme(theme);
      localStorage.setItem('theme', themeName);
      document.documentElement.setAttribute('data-theme', themeName);
      
      // Dispatch custom event for theme change
      window.dispatchEvent(new CustomEvent('themeChange', { detail: { theme: themeName } }));
    }
  }

  // Initialize theme on page load
  if (typeof document !== 'undefined') {
    initTheme();
  }

  // Export for global use
  window.themes = themes;
  window.defaultTheme = defaultTheme;
  window.applyTheme = applyTheme;

  function debounce(func, delay) {
    let timeout;
    return function(...args) {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), delay);
    };
  }

  const debouncedSwitchTheme = debounce(switchTheme, 150);
  window.switchTheme = debouncedSwitchTheme;
</script>
