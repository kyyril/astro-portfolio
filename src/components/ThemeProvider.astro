---
import { themes, defaultTheme } from '../config/themes';
---

<script is:inline define:vars={{ themes, defaultTheme }}>
  // Theme management
  function initTheme() {
    const savedTheme = localStorage.getItem('theme') || defaultTheme;
    const theme = themes[savedTheme] || themes[defaultTheme];
    applyTheme(theme);
    
    // Set data attribute for theme
    document.documentElement.setAttribute('data-theme', savedTheme);
  }

  function applyTheme(theme) {
    const root = document.documentElement;
Object.entries(theme.colors).forEach(([key, value]) => {
      root.style.setProperty(`--color-${key}`, value);
      console.log(`Setting CSS variable --color-${key}: ${value}`);
    });
  }

  function switchTheme(themeName) {
    const theme = themes[themeName];
    if (theme) {
      applyTheme(theme);
      localStorage.setItem('theme', themeName);
      document.documentElement.setAttribute('data-theme', themeName);
      
      // Dispatch custom event for theme change
      window.dispatchEvent(new CustomEvent('themeChange', { detail: { theme: themeName } }));
    }
  }

  // Initialize theme on page load
  if (typeof document !== 'undefined') {
    initTheme();
  }

  // Export for global use
function debounce(func, delay) {
    let timeout;
    return function(...args) {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), delay);
    };
  }

  const debouncedSwitchTheme = debounce(switchTheme, 150); // Adjust delay as needed
  window.switchTheme = debouncedSwitchTheme;
  window.themes = themes;
</script>
