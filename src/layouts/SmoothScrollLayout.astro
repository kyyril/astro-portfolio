---
// Smooth Scroll Layout - 120fps Ultra Smooth Experience
export interface Props {
  title: string;
  description?: string;
  showPerformanceMonitor?: boolean;
}

const { 
  title, 
  description = "Ultra smooth 120fps scrolling experience",
  showPerformanceMonitor = false 
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Critical CSS -->
    <link href="/global.css" rel="stylesheet" />
    <link href="/tailwind.css" rel="stylesheet" />
    
    <style>
      /* Critical smooth scroll styles */
      html {
        scroll-behavior: auto !important;
        overflow: hidden;
      }
      
      body {
        overflow: hidden;
        height: 100vh;
        margin: 0;
        padding: 0;
      }
      
      /* Smooth scroll container */
      #smooth-scroll-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        overflow: hidden;
        will-change: transform;
        transform: translateZ(0);
        backface-visibility: hidden;
      }
      
      #smooth-scroll-content {
        width: 100%;
        min-height: 100vh;
        transform: translateZ(0);
        backface-visibility: hidden;
      }
      
      /* Performance optimizations */
      * {
        transform-style: flat;
      }
      
      img, video, canvas {
        transform: translateZ(0);
        backface-visibility: hidden;
      }
      
      /* Loading state */
      .smooth-scroll-loading {
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      
      .smooth-scroll-loaded {
        opacity: 1;
      }
      
      /* Performance monitor */
      .performance-monitor {
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        font-family: 'JetBrains Mono', monospace;
        font-size: 12px;
        z-index: 10000;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .performance-monitor.hidden {
        display: none;
      }
      
      .fps-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 4px;
      }
      
      .fps-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #10b981;
        animation: pulse 2s infinite;
      }
      
      .fps-dot.warning {
        background: #f59e0b;
      }
      
      .fps-dot.error {
        background: #ef4444;
      }
      
      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
      }
      
      /* Scroll indicators */
      .scroll-indicator {
        position: fixed;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        width: 4px;
        height: 200px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
        z-index: 9999;
      }
      
      .scroll-thumb {
        width: 100%;
        background: var(--color-primary);
        border-radius: 2px;
        transition: height 0.1s ease;
      }
    </style>
  </head>
  
  <body class="smooth-scroll-loading">
    <!-- Performance Monitor -->
    {showPerformanceMonitor && (
      <div class="performance-monitor" id="performanceMonitor">
        <div class="fps-indicator">
          <div class="fps-dot" id="fpsDot"></div>
          <span>FPS: <span id="fpsValue">120</span></span>
        </div>
        <div>Scroll: <span id="scrollPosition">0</span>px</div>
        <div>Velocity: <span id="scrollVelocity">0</span></div>
      </div>
    )}
    
    <!-- Scroll Indicator -->
    <div class="scroll-indicator" id="scrollIndicator">
      <div class="scroll-thumb" id="scrollThumb"></div>
    </div>
    
    <!-- Smooth Scroll Wrapper -->
    <div id="smooth-scroll-wrapper">
      <div id="smooth-scroll-content">
        <slot />
      </div>
    </div>
    
    <script>
      // Smooth scroll implementation
      class SmoothScroll120fps {
        constructor() {
          this.scrollTarget = 0;
          this.scrollCurrent = 0;
          this.scrollVelocity = 0;
          this.isScrolling = false;
          this.rafId = null;
          
          // Performance monitoring
          this.fps = 120;
          this.frameCount = 0;
          this.lastTime = performance.now();
          
          // Configuration
          this.config = {
            ease: 0.06,        // Ultra smooth
            friction: 0.95,    // High friction for smoothness
            threshold: 0.05,   // Very precise stopping
            wheelMultiplier: 1.0,
            touchMultiplier: 1.2,
            maxVelocity: 40,   // Controlled velocity
            keyboardStep: window.innerHeight * 0.8
          };
          
          this.elements = {
            wrapper: document.getElementById('smooth-scroll-wrapper'),
            content: document.getElementById('smooth-scroll-content'),
            fpsValue: document.getElementById('fpsValue'),
            fpsDot: document.getElementById('fpsDot'),
            scrollPosition: document.getElementById('scrollPosition'),
            scrollVelocity: document.getElementById('scrollVelocity'),
            scrollThumb: document.getElementById('scrollThumb'),
            scrollIndicator: document.getElementById('scrollIndicator')
          };
          
          this.init();
        }
        
        init() {
          this.setupEventListeners();
          this.startScrollLoop();
          this.startPerformanceMonitoring();
          this.updateScrollIndicator();
          
          // Show content after initialization
          setTimeout(() => {
            document.body.classList.remove('smooth-scroll-loading');
            document.body.classList.add('smooth-scroll-loaded');
          }, 100);
        }
        
        setupEventListeners() {
          // Wheel events
          window.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });
          
          // Touch events
          this.setupTouchEvents();
          
          // Keyboard events
          window.addEventListener('keydown', this.handleKeyboard.bind(this));
          
          // Resize
          window.addEventListener('resize', this.handleResize.bind(this));
          
          // Anchor links
          this.setupAnchorLinks();
        }
        
        handleWheel(e) {
          e.preventDefault();
          
          let deltaY = e.deltaY;
          
          // Normalize different wheel modes
          if (e.deltaMode === 1) deltaY *= 16;
          if (e.deltaMode === 2) deltaY *= window.innerHeight;
          
          this.scrollTarget += deltaY * this.config.wheelMultiplier;
          this.clampScrollTarget();
        }
        
        setupTouchEvents() {
          let touchStartY = 0;
          let lastTouchY = 0;
          let touchVelocity = 0;
          
          window.addEventListener('touchstart', (e) => {
            touchStartY = lastTouchY = e.touches[0].clientY;
            touchVelocity = 0;
          }, { passive: true });
          
          window.addEventListener('touchmove', (e) => {
            e.preventDefault();
            const touchY = e.touches[0].clientY;
            const deltaY = (lastTouchY - touchY) * this.config.touchMultiplier;
            
            this.scrollTarget += deltaY;
            touchVelocity = deltaY;
            lastTouchY = touchY;
            
            this.clampScrollTarget();
          }, { passive: false });
          
          window.addEventListener('touchend', () => {
            // Add momentum
            this.scrollTarget += touchVelocity * 10;
            this.clampScrollTarget();
          }, { passive: true });
        }
        
        handleKeyboard(e) {
          const step = this.config.keyboardStep;
          
          switch (e.key) {
            case 'ArrowDown':
            case 'PageDown':
              e.preventDefault();
              this.scrollTarget += step;
              break;
            case 'ArrowUp':
            case 'PageUp':
              e.preventDefault();
              this.scrollTarget -= step;
              break;
            case 'Home':
              e.preventDefault();
              this.scrollTarget = 0;
              break;
            case 'End':
              e.preventDefault();
              this.scrollTarget = this.getMaxScroll();
              break;
            case ' ':
              e.preventDefault();
              this.scrollTarget += e.shiftKey ? -step : step;
              break;
          }
          
          this.clampScrollTarget();
        }
        
        setupAnchorLinks() {
          document.addEventListener('click', (e) => {
            const link = e.target.closest('a[href^="#"]');
            if (link) {
              e.preventDefault();
              const targetId = link.getAttribute('href').substring(1);
              const targetElement = document.getElementById(targetId);
              
              if (targetElement) {
                const rect = targetElement.getBoundingClientRect();
                this.scrollTarget = this.scrollCurrent + rect.top - 80;
                this.clampScrollTarget();
              }
            }
          });
        }
        
        clampScrollTarget() {
          const maxScroll = this.getMaxScroll();
          this.scrollTarget = Math.max(0, Math.min(this.scrollTarget, maxScroll));
        }
        
        getMaxScroll() {
          if (!this.elements.content) return 0;
          return Math.max(0, this.elements.content.scrollHeight - window.innerHeight);
        }
        
        startScrollLoop() {
          const tick = () => {
            const delta = this.scrollTarget - this.scrollCurrent;
            
            if (Math.abs(delta) > this.config.threshold) {
              // Ultra smooth easing
              this.scrollVelocity += delta * this.config.ease;
              this.scrollVelocity *= this.config.friction;
              
              // Clamp velocity
              this.scrollVelocity = Math.max(-this.config.maxVelocity, 
                                           Math.min(this.config.maxVelocity, this.scrollVelocity));
              
              this.scrollCurrent += this.scrollVelocity;
              
              // Apply transform
              if (this.elements.content) {
                this.elements.content.style.transform = `translate3d(0, ${-this.scrollCurrent}px, 0)`;
              }
              
              this.isScrolling = true;
              this.updateScrollIndicator();
              this.updatePerformanceDisplay();
            } else {
              this.scrollCurrent = this.scrollTarget;
              this.scrollVelocity = 0;
              this.isScrolling = false;
            }
            
            this.rafId = requestAnimationFrame(tick);
          };
          
          tick();
        }
        
        updateScrollIndicator() {
          if (!this.elements.scrollThumb) return;
          
          const maxScroll = this.getMaxScroll();
          const scrollPercent = maxScroll > 0 ? this.scrollCurrent / maxScroll : 0;
          const thumbHeight = Math.max(20, (window.innerHeight / (maxScroll + window.innerHeight)) * 200);
          const thumbPosition = scrollPercent * (200 - thumbHeight);
          
          this.elements.scrollThumb.style.height = `${thumbHeight}px`;
          this.elements.scrollThumb.style.transform = `translateY(${thumbPosition}px)`;
        }
        
        startPerformanceMonitoring() {
          const measureFPS = () => {
            this.frameCount++;
            const currentTime = performance.now();
            
            if (currentTime - this.lastTime >= 500) {
              this.fps = Math.round((this.frameCount * 2000) / (currentTime - this.lastTime));
              this.frameCount = 0;
              this.lastTime = currentTime;
              
              // Adaptive quality
              if (this.fps < 90) {
                this.config.ease = 0.08;
                this.config.friction = 0.92;
              } else if (this.fps >= 110) {
                this.config.ease = 0.05;
                this.config.friction = 0.96;
              }
              
              this.updatePerformanceDisplay();
            }
            
            requestAnimationFrame(measureFPS);
          };
          
          measureFPS();
        }
        
        updatePerformanceDisplay() {
          if (this.elements.fpsValue) {
            this.elements.fpsValue.textContent = this.fps;
          }
          
          if (this.elements.fpsDot) {
            this.elements.fpsDot.className = 'fps-dot';
            if (this.fps < 60) this.elements.fpsDot.classList.add('error');
            else if (this.fps < 90) this.elements.fpsDot.classList.add('warning');
          }
          
          if (this.elements.scrollPosition) {
            this.elements.scrollPosition.textContent = Math.round(this.scrollCurrent);
          }
          
          if (this.elements.scrollVelocity) {
            this.elements.scrollVelocity.textContent = Math.round(Math.abs(this.scrollVelocity) * 10) / 10;
          }
        }
        
        handleResize() {
          this.clampScrollTarget();
          this.scrollCurrent = Math.min(this.scrollCurrent, this.getMaxScroll());
          this.scrollTarget = this.scrollCurrent;
          this.updateScrollIndicator();
        }
        
        destroy() {
          if (this.rafId) {
            cancelAnimationFrame(this.rafId);
          }
        }
      }
      
      // Initialize smooth scroll
      let smoothScrollInstance;
      
      document.addEventListener('DOMContentLoaded', () => {
        smoothScrollInstance = new SmoothScroll120fps();
      });
      
      document.addEventListener('astro:page-load', () => {
        if (smoothScrollInstance) {
          smoothScrollInstance.destroy();
        }
        smoothScrollInstance = new SmoothScroll120fps();
      });
      
      document.addEventListener('astro:before-preparation', () => {
        if (smoothScrollInstance) {
          smoothScrollInstance.destroy();
        }
      });
    </script>
  </body>
</html>
