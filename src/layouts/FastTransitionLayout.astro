---
// Fast Transition Layout - Simple, Fast & Cool
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Fast and cool transitions" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Critical CSS -->
    <link href="/global.css" rel="stylesheet" />
    <link href="/tailwind.css" rel="stylesheet" />
    
    <style>
      /* Critical inline styles for fast loading */
      body {
        opacity: 0;
        transition: opacity 0.2s ease;
      }
      
      body.loaded {
        opacity: 1;
      }
      
      /* Fast loading indicator */
      .loading-indicator {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 24px;
        height: 24px;
        border: 2px solid var(--color-border);
        border-top: 2px solid var(--color-primary);
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
        z-index: 9999;
      }
      
      body.loaded .loading-indicator {
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s ease;
      }
      
      /* Prevent flash of unstyled content */
      .fade-in-element {
        opacity: 0;
        transform: translateY(10px);
        transition: opacity 0.3s ease, transform 0.3s ease;
      }
      
      .fade-in-element.visible {
        opacity: 1;
        transform: translateY(0);
      }
    </style>
  </head>
  
  <body>
    <!-- Fast loading indicator -->
    <div class="loading-indicator"></div>
    
    <!-- Main content -->
    <main>
      <slot />
    </main>
    
    <!-- Fast Transitions Component -->
    <script>
      // Fast page initialization
      document.addEventListener('DOMContentLoaded', () => {
        initFastTransitions();
      });
      
      document.addEventListener('astro:page-load', () => {
        initFastTransitions();
      });
      
      function initFastTransitions() {
        // Show body with fade in
        requestAnimationFrame(() => {
          document.body.classList.add('loaded');
        });
        
        // Initialize fade-in elements
        const fadeElements = document.querySelectorAll('.fade-in-element');
        fadeElements.forEach((element, index) => {
          setTimeout(() => {
            element.classList.add('visible');
          }, index * 100); // Stagger by 100ms
        });
        
        // Setup interactive elements
        setupInteractiveElements();
        
        // Setup scroll reveals
        setupScrollReveal();
      }
      
      function setupInteractiveElements() {
        // Terminal cards
        document.querySelectorAll('.terminal-card').forEach(card => {
          // Add ripple effect on click
          card.addEventListener('click', (e) => {
            createRipple(e, card);
          });
        });
        
        // Buttons
        document.querySelectorAll('button, .btn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            // Quick feedback
            btn.style.transform = 'scale(0.95)';
            setTimeout(() => {
              btn.style.transform = '';
            }, 100);
            
            createRipple(e, btn);
          });
        });
        
        // Navigation items
        document.querySelectorAll('.nav-item').forEach(item => {
          item.addEventListener('mouseenter', () => {
            item.style.transform = 'scale(1.05) translateY(-1px)';
          });
          
          item.addEventListener('mouseleave', () => {
            item.style.transform = '';
          });
        });
      }
      
      function createRipple(event, element) {
        const ripple = document.createElement('span');
        const rect = element.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = event.clientX - rect.left - size / 2;
        const y = event.clientY - rect.top - size / 2;
        
        ripple.style.cssText = `
          position: absolute;
          width: ${size}px;
          height: ${size}px;
          left: ${x}px;
          top: ${y}px;
          background: rgba(var(--color-primary-rgb), 0.2);
          border-radius: 50%;
          transform: scale(0);
          animation: ripple 0.4s ease-out;
          pointer-events: none;
          z-index: 1;
        `;
        
        element.style.position = 'relative';
        element.style.overflow = 'hidden';
        element.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 400);
      }
      
      function setupScrollReveal() {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const element = entry.target;
              element.style.opacity = '1';
              element.style.transform = 'translateY(0)';
            }
          });
        }, {
          threshold: 0.1,
          rootMargin: '0px 0px -20px 0px'
        });
        
        // Auto-add scroll reveal to common elements
        const revealElements = document.querySelectorAll('h1, h2, h3, .terminal-card, .project-card');
        revealElements.forEach(el => {
          if (!el.classList.contains('fade-in-element')) {
            el.style.opacity = '0';
            el.style.transform = 'translateY(15px)';
            el.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
            observer.observe(el);
          }
        });
      }
      
      // Theme toggle smooth transition
      const themeToggle = document.querySelector('.theme-toggle-btn');
      if (themeToggle) {
        themeToggle.addEventListener('click', () => {
          document.body.style.transition = 'background-color 0.2s ease, color 0.2s ease';
        });
      }
      
      // Cleanup
      document.addEventListener('astro:before-preparation', () => {
        document.body.classList.remove('loaded');
      });
    </script>
    
    <style>
      /* Ripple animation */
      @keyframes ripple {
        to {
          transform: scale(2);
          opacity: 0;
        }
      }
      
      /* Smooth page transitions */
      main {
        min-height: 100vh;
        transition: opacity 0.2s ease;
      }
      
      /* Cool hover effects for common elements */
      .terminal-card,
      .project-card {
        transition: transform 0.15s ease, box-shadow 0.15s ease;
      }
      
      .terminal-card:hover,
      .project-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      }
      
      /* Button effects */
      button,
      .btn {
        transition: all 0.1s ease;
        position: relative;
        overflow: hidden;
      }
      
      button:hover,
      .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(var(--color-primary-rgb), 0.3);
      }
      
      /* Input focus effects */
      input:focus,
      textarea:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
        transition: outline 0.1s ease;
      }
      
      /* Link hover effects */
      a {
        transition: color 0.1s ease;
      }
      
      a:hover {
        color: var(--color-primary);
      }
      
      /* Mobile optimizations */
      @media (max-width: 768px) {
        .terminal-card:hover,
        .project-card:hover {
          transform: translateY(-2px);
        }
        
        button:hover,
        .btn:hover {
          transform: none;
        }
      }
      
      /* Reduced motion */
      @media (prefers-reduced-motion: reduce) {
        *,
        *::before,
        *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
        }
        
        .loading-indicator {
          animation: none;
        }
      }
    </style>
  </body>
</html>
