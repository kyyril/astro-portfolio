---
import Layout from '../layouts/Layout.astro';
---

<Layout title="AI Chat - Portfolio">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-4 text-[var(--color-primary)]">AI Chat</h1>
      <p class="text-xl text-[var(--color-secondary)]">
        Ask me anything about my work, technologies, or get coding advice!
      </p>
    </div>

    <div class="terminal-card h-[600px] flex flex-col">
      <!-- Chat messages -->
      <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-4 mb-4">
        <div class="flex justify-start">
          <div class="max-w-[80%] glass rounded-lg p-3">
            <p class="text-[var(--color-text)]">
              ðŸ‘‹ Hi! I'm an AI assistant that can help you learn about my projects, technologies I work with, or provide coding advice. What would you like to know?
            </p>
          </div>
        </div>
      </div>

      <!-- Chat input -->
      <form id="chat-form" class="flex space-x-2 p-4 border-t border-[var(--color-border)]">
        <input
          id="chat-input"
          type="text"
          placeholder="Ask me anything..."
          class="flex-1 px-4 py-2 glass rounded-lg text-[var(--color-text)] placeholder-[var(--color-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)]"
          maxlength="500"
        />
        <button
          type="submit"
          id="send-btn"
          class="px-6 py-2 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Send
        </button>
      </form>
    </div>

    <!-- Suggested questions -->
    <div class="mt-6">
      <h3 class="text-lg font-semibold mb-3 text-[var(--color-accent)]">Suggested Questions:</h3>
      <div class="grid md:grid-cols-2 gap-2">
        <button class="suggestion-btn text-left p-3 glass rounded-lg hover:bg-[var(--color-surface)] transition-colors">
          What technologies do you specialize in?
        </button>
        <button class="suggestion-btn text-left p-3 glass rounded-lg hover:bg-[var(--color-surface)] transition-colors">
          Tell me about your most interesting project
        </button>
        <button class="suggestion-btn text-left p-3 glass rounded-lg hover:bg-[var(--color-surface)] transition-colors">
          How can I improve my coding skills?
        </button>
        <button class="suggestion-btn text-left p-3 glass rounded-lg hover:bg-[var(--color-surface)] transition-colors">
          What's your development workflow?
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  class ChatManager {
    constructor() {
      this.messages = [];
      this.isLoading = false;
      this.init();
    }

    init() {
      this.bindEvents();
      this.loadChatHistory();
    }

    bindEvents() {
      const form = document.getElementById('chat-form');
      const input = document.getElementById('chat-input');
      const suggestionBtns = document.querySelectorAll('.suggestion-btn');

      form?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.sendMessage();
      });

      input?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });

      suggestionBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          input.value = btn.textContent.trim();
          this.sendMessage();
        });
      });
    }

    async sendMessage() {
      const input = document.getElementById('chat-input');
      const message = input.value.trim();

      if (!message || this.isLoading) return;

      input.value = '';
      this.isLoading = true;
      this.updateSendButton(true);

      // Add user message
      this.addMessage(message, 'user');

      // Add loading indicator
      const loadingId = this.addLoadingMessage();

      try {
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message })
        });

        const data = await response.json();

        // Remove loading indicator
        this.removeLoadingMessage(loadingId);

        if (response.ok) {
          this.addMessage(data.response, 'assistant');
        } else {
          this.addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
        }
      } catch (error) {
        console.error('Chat error:', error);
        this.removeLoadingMessage(loadingId);
        this.addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
      }

      this.isLoading = false;
      this.updateSendButton(false);
      this.saveChatHistory();
    }

    addMessage(content, role) {
      const messagesContainer = document.getElementById('chat-messages');
      const messageDiv = document.createElement('div');
      const messageId = Date.now();

      messageDiv.className = `flex ${role === 'user' ? 'justify-end' : 'justify-start'}`;
      messageDiv.innerHTML = `
        <div class="max-w-[80%] ${role === 'user' ? 'bg-[var(--color-primary)]' : 'glass'} rounded-lg p-3">
          <p class="text-${role === 'user' ? 'white' : '[var(--color-text)]'} whitespace-pre-wrap">${this.escapeHtml(content)}</p>
        </div>
      `;

      messagesContainer.appendChild(messageDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;

      this.messages.push({ content, role, id: messageId });
      return messageId;
    }

    addLoadingMessage() {
      const messagesContainer = document.getElementById('chat-messages');
      const loadingDiv = document.createElement('div');
      const loadingId = `loading-${Date.now()}`;

      loadingDiv.id = loadingId;
      loadingDiv.className = 'flex justify-start';
      loadingDiv.innerHTML = `
        <div class="glass rounded-lg p-3">
          <div class="flex items-center space-x-2">
            <div class="animate-spin w-4 h-4 border-2 border-[var(--color-primary)] border-t-transparent rounded-full"></div>
            <span class="text-[var(--color-secondary)]">Thinking...</span>
          </div>
        </div>
      `;

      messagesContainer.appendChild(loadingDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;

      return loadingId;
    }

    removeLoadingMessage(loadingId) {
      const loadingElement = document.getElementById(loadingId);
      if (loadingElement) {
        loadingElement.remove();
      }
    }

    updateSendButton(loading) {
      const sendBtn = document.getElementById('send-btn');
      if (sendBtn) {
        sendBtn.disabled = loading;
        sendBtn.textContent = loading ? 'Sending...' : 'Send';
      }
    }

    saveChatHistory() {
      try {
        localStorage.setItem('chatHistory', JSON.stringify(this.messages));
      } catch (error) {
        console.error('Error saving chat history:', error);
      }
    }

    loadChatHistory() {
      try {
        const saved = localStorage.getItem('chatHistory');
        if (saved) {
          this.messages = JSON.parse(saved);
          this.renderChatHistory();
        }
      } catch (error) {
        console.error('Error loading chat history:', error);
      }
    }

    renderChatHistory() {
      const messagesContainer = document.getElementById('chat-messages');
      // Clear existing messages except the welcome message
      const welcomeMessage = messagesContainer.firstElementChild;
      messagesContainer.innerHTML = '';
      if (welcomeMessage) {
        messagesContainer.appendChild(welcomeMessage);
      }

      this.messages.forEach(message => {
        if (message.role !== 'system') {
          this.addMessageToDOM(message.content, message.role);
        }
      });
    }

    addMessageToDOM(content, role) {
      const messagesContainer = document.getElementById('chat-messages');
      const messageDiv = document.createElement('div');

      messageDiv.className = `flex ${role === 'user' ? 'justify-end' : 'justify-start'}`;
      messageDiv.innerHTML = `
        <div class="max-w-[80%] ${role === 'user' ? 'bg-[var(--color-primary)]' : 'glass'} rounded-lg p-3">
          <p class="text-${role === 'user' ? 'white' : '[var(--color-text)]'} whitespace-pre-wrap">${this.escapeHtml(content)}</p>
        </div>
      `;

      messagesContainer.appendChild(messageDiv);
    }

    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ChatManager());
  } else {
    new ChatManager();
  }
</script>