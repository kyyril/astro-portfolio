---
 
import Layout from '../layouts/Layout.astro';
 
const isLogin = Astro.cookies.get("user_session")?.value;
---
 
<Layout title="Guestbook - Portfolio">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-4 text-[var(--color-primary)]">Guestbook</h1>
      <p class="text-xl text-[var(--color-secondary)]">
        Leave a message and let me know you were here!
      </p>
    </div>
 
    {/* Auth section */}
    <div id="auth-section" class="terminal-card mb-8">
      <div id="login-prompt" class="text-center">
        <p class="mb-4 text-[var(--color-text)]">Sign in with GitHub to leave a message</p>
        <button
          id="github-login-btn"
          class="inline-flex items-center px-6 py-3 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all"
        >
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"></path>
          </svg>
          Sign in with GitHub
        </button>
      </div>
 
      <div id="user-info" class="hidden">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3">
            <img id="user-avatar" class="w-10 h-10 rounded-full" alt="User avatar">
            <div>
              <p class="font-semibold text-[var(--color-text)]">Signed in as <span id="username"></span></p>
            </div>
          </div>
          <button
            id="signout-btn"
            class="px-4 py-2 text-sm glass rounded hover:bg-[var(--color-border)] transition-colors"
          >
            Sign out
          </button>
        </div>
      </div>
    </div>
 
    {/* Message form */}
    <div id="message-form" class="terminal-card mb-8 hidden">
      <form id="guestbook-form">
        <div class="mb-4">
          <label for="message" class="block text-sm font-medium text-[var(--color-text)] mb-2">
            Your message
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            maxlength="500"
            placeholder="Leave a nice message..."
            class="w-full px-3 py-2 glass rounded-lg text-[var(--color-text)] placeholder-[var(--color-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)]"
          ></textarea>
          <div class="text-xs text-[var(--color-secondary)] mt-1">
            <span id="char-count">0</span>/500 characters
          </div>
        </div>
        <button
          type="submit"
          class="px-6 py-2 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Post Message
        </button>
      </form>
    </div>
 
    {/* Messages */}
    <div class="space-y-4">
      <h2 class="text-2xl font-semibold text-[var(--color-accent)] mb-6">Messages</h2>
      <div id="messages-container">
        {/* Loading state */}
        <div id="loading" class="text-center py-8">
          <div class="animate-spin w-8 h-8 border-2 border-[var(--color-primary)] border-t-transparent rounded-full mx-auto"></div>
          <p class="mt-2 text-[var(--color-secondary)]">Loading messages...</p>
        </div>
      </div>
    </div>
  </div>
</Layout>
 
<script>
  interface GuestbookEntry {
    id: string;
    message: string;
    createdAt: string;
    user: {
      id: string;
      username: string;
      avatarUrl: string | null;
    };
    replies?: Reply[]; // Renamed from 'replies' to 'replies' to match schema
  }

  interface Reply {
    id: string;
    content: string;
    createdAt: string;
    author: {
      id: string;
      username: string;
      avatarUrl: string | null;
    };
  }
 
  class GuestbookManager {
    user: {
      id: string;
      username: string;
      avatarUrl: string | null;
    } | null = null;
    editingMessageId: string | null = null;
    messages: GuestbookEntry[] = [];
 
    constructor() {
      this.init();
    }
 
    async init() {
      await this.checkAuthStatus();
      this.bindEvents();
      await this.loadMessages();
    }
 
    async checkAuthStatus() {
      try {
        const response = await fetch('/api/auth/status');
        if (response.ok) {
          this.user = await response.json();
          this.showUserInfo();
        } else {
          this.showLoginPrompt();
        }
      } catch (error) {
        console.error('Error checking auth status:', error);
        this.showLoginPrompt();
      }
    }
 
    showLoginPrompt() {
      document.getElementById('login-prompt')?.classList.remove('hidden');
      document.getElementById('user-info')?.classList.add('hidden');
      document.getElementById('message-form')?.classList.add('hidden');
    }
 
    showUserInfo() {
      const loginPrompt = document.getElementById('login-prompt');
      loginPrompt?.classList.add('hidden');
      const userInfoEl = document.getElementById('user-info');
      userInfoEl?.classList.remove('hidden');
      const messageForm = document.getElementById('message-form');
      messageForm?.classList.remove('hidden');
 
      const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
      if (userAvatar && this.user) {
        userAvatar.src = this.user.avatarUrl || '/default-avatar.png';
      }
      const usernameElement = document.getElementById('username');
      if (usernameElement && this.user) {
        usernameElement.textContent = this.user.username;
      }
    }
 
    bindEvents() {
      // GitHub login
      document.getElementById('github-login-btn')?.addEventListener('click', (e: Event) => {
        window.location.href = '/api/auth/github';
      });
 
      // Sign out
      document.getElementById('signout-btn')?.addEventListener('click', async () => {
        try {
          await fetch('/api/auth/signout', { method: 'POST' });
          this.user = null;
          this.showLoginPrompt();
          await this.loadMessages();
        } catch (error) {
          console.error('Error signing out:', error);
        }
      });
 
      // Character counter
      const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
      const charCount = document.getElementById('char-count');
      messageTextarea?.addEventListener('input', (e: Event) => {
        if (charCount) {
          charCount.textContent = messageTextarea.value.length.toString();
        }
      });
 
      // Form submission
      document.getElementById('guestbook-form')?.addEventListener('submit', async (e: Event) => {
        e.preventDefault();
        await this.submitMessage(e);
      });
    }
 
    async submitMessage(e: Event) {
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const message = formData.get('message')?.toString();
 
      if (!message || !message.trim()) return;
 
      try {
        const response = await fetch('/api/guestbook', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message: message.trim() })
        });
 
        if (response.ok) {
          form.reset();
          const charCount = document.getElementById('char-count');
          if (charCount) {
            charCount.textContent = '0';
          }
          await this.loadMessages();
        } else {
          const error = await response.json();
          alert(error.message || 'Failed to post message');
        }
      } catch (error) {
        console.error('Error posting message:', error);
        alert('Failed to post message');
      }
    }
 
    async loadMessages() {
      try {
        const response = await fetch('/api/guestbook');
        this.messages = await response.json();
        this.renderMessages(this.messages);
      } catch (error) {
        console.error('Error loading messages:', error);
        const container = document.getElementById('messages-container');
        if (container) {
          container.innerHTML = `
            <div class="text-center py-8 text-[var(--color-secondary)]">
              Failed to load messages
            </div>
          `;
        }
      }
    }
 
    renderMessages(messages: GuestbookEntry[]) {
      const container = document.getElementById('messages-container');
 
      if (!container) return;
 
      if (messages.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-4">ðŸ’­</div>
            <p class="text-[var(--color-secondary)]">No messages yet. Be the first to leave one!</p>
          </div>
        `;
        return;
      }
 
      container.innerHTML = messages
        .map((message) => {
          let avatarUrl = message.user?.avatarUrl;
          let username = message.user ? message.user.username : "Unknown User";
          
          const repliesHtml = message.replies && message.replies.length > 0
            ? `
              <div class="mt-4 pl-6 border-l-2 border-[var(--color-border)] space-y-3">
                ${message.replies.map(reply => `
                  <div class="flex items-start space-x-3 bg-[var(--color-background-light)] p-3 rounded-lg shadow-inner">
                    <img
                      src="${reply.author.avatarUrl || "/default-avatar.png"}"
                      alt="${reply.author.username}"
                      class="w-7 h-7 rounded-full flex-shrink-0 border border-[var(--color-border)]"
                    />
                    <div class="flex-1">
                      <div class="flex items-center space-x-2 mb-1">
                        <span class="font-bold text-sm text-[var(--color-primary)]">
                          ${reply.author.username}
                        </span>
                        <span class="text-xs text-[var(--color-secondary)]">
                          ${new Date(reply.createdAt).toLocaleDateString()}
                        </span>
                      </div>
                      <p class="text-sm text-[var(--color-text)] whitespace-pre-wrap">
                        ${this.escapeHtml(reply.content)}
                      </p>
                    </div>
                  </div>
                `).join('')}
              </div>
            `
            : '';
          
          return `
          <div class="terminal-card">
            <div class="flex items-start space-x-3">
              <img
                src="${avatarUrl ? avatarUrl : "/default-avatar.png"}"
                alt="${username}"
                class="w-10 h-10 rounded-full flex-shrink-0"
              />
              <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                  <div>
                    <span class="font-semibold text-[var(--color-accent)]">
                      ${message.user ? message.user.username : "Unknown User"}
                    </span>
                    <span class="text-sm text-[var(--color-secondary)] ml-2">
                      ${new Date(message.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  <div class="flex space-x-2">
                    ${guestbookManager.user?.username === username ?  `
                      <button
                        class="px-2 py-1 text-sm glass rounded hover:bg-[var(--color-border)] transition-colors delete-btn"
                        data-message-id="${message.id}"
                      >
                        Delete
                      </button>
                      <button
                        class="px-2 py-1 text-sm glass rounded hover:bg-[var(--color-border)] transition-colors edit-btn"
                        data-message-id="${message.id}"
                      >
                        Edit
                      </button>
                    ` : ""}
                    ${guestbookManager.user ? `
                      <button
                        class="px-2 py-1 text-sm glass rounded hover:bg-[var(--color-border)] transition-colors reply-btn"
                        data-message-id="${message.id}"
                      >
                        Reply
                      </button>
                    ` : ""}
                  </div>
                </div>
                <p class="text-[var(--color-text)] whitespace-pre-wrap message-text" data-message-id="${message.id}">
                  ${this.escapeHtml(message.message)}
                </p>
                <textarea
                  class="w-full px-3 py-2 glass rounded-lg text-[var(--color-text)] placeholder-[var(--color-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)] hidden edit-textarea"
                  data-message-id="${message.id}"
                  rows="4"
                  maxlength="500"
                >${message.message}</textarea>
                <div class="hidden edit-actions" data-message-id="${message.id}">
                  <button
                    class="px-4 py-2 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all mr-2 update-btn"
                    data-message-id="${message.id}"
                  >
                    Update Message
                  </button>
                  <button
                    class="px-4 py-2 glass rounded hover:bg-[var(--color-border)] transition-colors cancel-edit-btn"
                    data-message-id="${message.id}"
                  >
                    Cancel
                  </button>
                </div>
                
                ${repliesHtml}
                
                <div class="reply-section hidden mt-4" data-message-id="${message.id}">
                  <div class="pl-6">
                    <textarea
                      class="w-full px-3 py-2 glass rounded-lg text-[var(--color-text)] placeholder-[var(--color-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)] reply-textarea"
                      data-message-id="${message.id}"
                      rows="3"
                      maxlength="500"
                      placeholder="Write your reply..."
                    ></textarea>
                    <div class="flex justify-end space-x-2 mt-2">
                      <button
                        class="px-4 py-2 glass rounded hover:bg-[var(--color-border)] transition-colors cancel-reply-btn"
                        data-message-id="${message.id}"
                      >
                        Cancel
                      </button>
                      <button
                        class="px-4 py-2 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all reply-submit-btn"
                        data-message-id="${message.id}"
                      >
                        Submit Reply
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        })
        .join("");
    }
 
    getUserAvatar(message: GuestbookEntry): string {
      let avatarUrl = message.user?.avatarUrl;
      let username = message.user ? message.user.username ?? "Unknown User" : "Unknown User";
      return `
        <img
          src="${avatarUrl ? avatarUrl : "/default-avatar.png"}"
          alt="${username}"
          class="w-10 h-10 rounded-full flex-shrink-0"
        />
      `;
    }
 
    escapeHtml(text: string) {
      const div = document.createElement("div");
      div.textContent = text;
      return div.innerHTML;
    }
  }
 
  let guestbookManager: GuestbookManager;
 
  document.addEventListener('DOMContentLoaded', () => {
    guestbookManager = new GuestbookManager();
 
    document.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement;
      
      if (target && target.classList.contains('delete-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId && confirm('Are you sure you want to delete this message?')) {
          await deleteMessage(messageId);
        }
      }
 
      if (target && target.classList.contains('edit-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId) {
          const messageText = document.querySelector(`.message-text[data-message-id="${messageId}"]`);
          const editTextarea = document.querySelector(`.edit-textarea[data-message-id="${messageId}"]`);
          const editActions = document.querySelector(`.edit-actions[data-message-id="${messageId}"]`);
 
          if (messageText && editTextarea && editActions) {
            messageText.classList.add('hidden');
            editTextarea.classList.remove('hidden');
            editActions.classList.remove('hidden');
          }
        }
      }

      if (target && target.classList.contains('cancel-edit-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId) {
          const messageText = document.querySelector(`.message-text[data-message-id="${messageId}"]`);
          const editTextarea = document.querySelector(`.edit-textarea[data-message-id="${messageId}"]`) as HTMLTextAreaElement;
          const editActions = document.querySelector(`.edit-actions[data-message-id="${messageId}"]`);
 
          if (messageText && editTextarea && editActions) {
            messageText.classList.remove('hidden');
            editTextarea.classList.add('hidden');
            editActions.classList.add('hidden');
            // Reset textarea value
            const originalMessage = messageText.textContent || '';
            editTextarea.value = originalMessage;
          }
        }
      }
 
      if (target && target.classList.contains('update-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId) {
          const editTextarea = document.querySelector(`.edit-textarea[data-message-id="${messageId}"]`) as HTMLTextAreaElement;
          if (editTextarea) {
            const newMessage = editTextarea.value.trim();
            if (newMessage) {
              await updateMessage(messageId, newMessage);
            }
          }
        }
      }
 
      if (target && target.classList.contains('reply-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId) {
          const replySection = document.querySelector(`.reply-section[data-message-id="${messageId}"]`);
          if (replySection) {
            replySection.classList.toggle('hidden');
            if (!replySection.classList.contains('hidden')) {
              const textarea = replySection.querySelector('.reply-textarea') as HTMLTextAreaElement;
              textarea?.focus();
            }
          }
        }
      }

      if (target && target.classList.contains('cancel-reply-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId) {
          const replySection = document.querySelector(`.reply-section[data-message-id="${messageId}"]`);
          const replyTextarea = document.querySelector(`.reply-textarea[data-message-id="${messageId}"]`) as HTMLTextAreaElement;
          if (replySection && replyTextarea) {
            replySection.classList.add('hidden');
            replyTextarea.value = '';
          }
        }
      }
 
      if (target && target.classList.contains('reply-submit-btn')) {
        const messageId = target.dataset.messageId;
        if (messageId) {
          const replyTextarea = document.querySelector(`.reply-textarea[data-message-id="${messageId}"]`) as HTMLTextAreaElement;
          if (replyTextarea) {
            const replyContent = replyTextarea.value.trim();
            if (replyContent) {
              await submitReply(messageId, replyContent);
            }
          }
        }
      }
    });
  });
 
  async function deleteMessage(messageId: string) {
    try {
      const response = await fetch('/api/guestbook', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id: messageId })
      });
 
      if (response.ok) {
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to delete message');
      }
    } catch (error) {
      console.error('Error deleting message:', error);
      alert('Failed to delete message');
    }
  }
 
  async function updateMessage(messageId: string, newMessage: string) {
    try {
      const response = await fetch('/api/guestbook', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id: messageId, message: newMessage })
      });
 
      if (response.ok) {
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to update message');
      }
    } catch (error) {
      console.error('Error updating message:', error);
      alert('Failed to update message');
    }
  }
 
  async function submitReply(messageId: string, content: string) {
    try {
      const response = await fetch('/api/replies', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          guestbookEntryId: messageId, // Changed to guestbookEntryId
          content: content
        })
      });
 
      if (response.ok) {
        // Clear the textarea and hide the reply section
        const replyTextarea = document.querySelector(`.reply-textarea[data-message-id="${messageId}"]`) as HTMLTextAreaElement;
        const replySection = document.querySelector(`.reply-section[data-message-id="${messageId}"]`);
        
        if (replyTextarea) {
          replyTextarea.value = "";
        }
        if (replySection) {
          replySection.classList.add('hidden');
        }
 
        // Refresh messages to show the new reply
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to submit reply');
      }
    } catch (error) {
      console.error('Error submitting reply:', error);
      alert('Failed to submit reply');
    }
  }
</script>