---
import Layout from '../layouts/Layout.astro';
import  '../assets/guestbook.css'

---

<Layout title="Guestbook - Portfolio">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-4 text-[var(--color-primary)]">Guestbook</h1>
      <p class="text-xl text-[var(--color-secondary)]">
        Leave a message and let me know you were here!
      </p>
    </div>

    {/* Auth section */}
    <div id="auth-section" class="terminal-card mb-8">
      <div id="login-prompt" class="text-center">
        <p class="mb-4 text-[var(--color-text)]">Sign in with GitHub to leave a message</p>
        <button
          id="github-login-btn"
          class="inline-flex items-center px-6 py-3 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all"
        >
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"></path>
          </svg>
          Sign in with GitHub
        </button>
      </div>

      <div id="user-info" class="hidden">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3">
            <img id="user-avatar" class="w-10 h-10 rounded-full" alt="User avatar">
            <div>
              <p class="font-semibold text-[var(--color-text)]">Signed in as <span id="username"></span></p>
            </div>
          </div>
          <button
            id="signout-btn"
            class="px-4 py-2 text-sm glass rounded hover:bg-[var(--color-border)] transition-colors"
          >
            Sign out
          </button>
        </div>
      </div>
    </div>

    {/* Message form */}
    <div id="message-form" class="terminal-card mb-8 hidden">
      <form id="guestbook-form">
        <div class="mb-4">
          <label for="message" class="block text-sm font-medium text-[var(--color-text)] mb-2">
            Your message
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            maxlength="500"
            placeholder="Leave a nice message..."
            class="w-full px-3 py-2 glass rounded-lg text-[var(--color-text)] placeholder-[var(--color-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)]"
          ></textarea>
          <div class="text-xs text-[var(--color-secondary)] mt-1">
            <span id="char-count">0</span>/500 characters
          </div>
        </div>
        <button
          type="submit"
          class="px-6 py-2 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Post Message
        </button>
      </form>
    </div>

    {/* Messages */}
    <div class="space-y-4">
      <h2 class="text-2xl font-semibold text-[var(--color-accent)] mb-6">Messages</h2>
      <div id="messages-container">
        {/* Loading state */}
        <div id="loading" class="text-center py-8">
          <div class="animate-spin w-8 h-8 border-2 border-[var(--color-primary)] border-t-transparent rounded-full mx-auto"></div>
          <p class="mt-2 text-[var(--color-secondary)]">Loading messages...</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  interface GuestbookEntry {
    id: string;
    message: string;
    createdAt: string;
    user: {
      id: string;
      username: string;
      avatarUrl: string | null;
    };
    replies?: Reply[];
  }

  interface Reply {
    id: string;
    content: string;
    createdAt: string;
    author: {
      id: string;
      username: string;
      avatarUrl: string | null;
    };
  }

  class GuestbookManager {
    user: {
      id: string;
      username: string;
      avatarUrl: string | null;
    } | null = null;
    messages: GuestbookEntry[] = [];

    constructor() {
      this.init();
    }

    async init() {
      await this.checkAuthStatus();
      this.bindEvents();
      await this.loadMessages();
    }

    async checkAuthStatus() {
      try {
        const response = await fetch('/api/auth/status');
        if (response.ok) {
          this.user = await response.json();
          this.showUserInfo();
        } else {
          this.showLoginPrompt();
        }
      } catch (error) {
        console.error('Error checking auth status:', error);
        this.showLoginPrompt();
      }
    }

    showLoginPrompt() {
      document.getElementById('login-prompt')?.classList.remove('hidden');
      document.getElementById('user-info')?.classList.add('hidden');
      document.getElementById('message-form')?.classList.add('hidden');
    }

    showUserInfo() {
      document.getElementById('login-prompt')?.classList.add('hidden');
      document.getElementById('user-info')?.classList.remove('hidden');
      document.getElementById('message-form')?.classList.remove('hidden');

      const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
      if (userAvatar && this.user) {
        userAvatar.src = this.user.avatarUrl || '/default-avatar.png';
      }
      const usernameElement = document.getElementById('username');
      if (usernameElement && this.user) {
        usernameElement.textContent = this.user.username;
      }
    }

    bindEvents() {
      // GitHub login
      document.getElementById('github-login-btn')?.addEventListener('click', () => {
        window.location.href = '/api/auth/github';
      });

      // Sign out
      document.getElementById('signout-btn')?.addEventListener('click', async () => {
        try {
          await fetch('/api/auth/signout', { method: 'POST' });
          this.user = null;
          this.showLoginPrompt();
          await this.loadMessages();
        } catch (error) {
          console.error('Error signing out:', error);
        }
      });

      // Character counter
      const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
      const charCount = document.getElementById('char-count');
      messageTextarea?.addEventListener('input', () => {
        if (charCount) {
          charCount.textContent = messageTextarea.value.length.toString();
        }
      });

      // Form submission
      document.getElementById('guestbook-form')?.addEventListener('submit', async (e: Event) => {
        e.preventDefault();
        await this.submitMessage(e);
      });
    }

    async submitMessage(e: Event) {
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const message = formData.get('message')?.toString();

      if (!message || !message.trim()) return;

      try {
        const response = await fetch('/api/guestbook', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message: message.trim() })
        });

        if (response.ok) {
          form.reset();
          const charCount = document.getElementById('char-count');
          if (charCount) charCount.textContent = '0';
          await this.loadMessages();
        } else {
          const error = await response.json();
          alert(error.message || 'Failed to post message');
        }
      } catch (error) {
        console.error('Error posting message:', error);
        alert('Failed to post message');
      }
    }

     async loadMessages() {
    try {
      const response = await fetch('/api/guestbook');
      this.messages = await response.json();
      this.renderMessages(this.messages);
    } catch (error) {
      console.error('Error loading messages:', error);
      const container = document.getElementById('messages-container');
      if (container) {
        container.innerHTML = `
          <div class="terminal-error">
            <span class="terminal-prompt">error@guestbook:~$</span>
            <span class="terminal-text">Failed to load messages. Connection timeout.</span>
          </div>
        `;
      }
    }
  }

  renderMessages(messages: GuestbookEntry[]) {
    const container = document.getElementById('messages-container');
    if (!container) return;

    if (messages.length === 0) {
      container.innerHTML = `
        <div class="terminal-empty">
          <span class="terminal-prompt">guest@guestbook:~$</span>
          <span class="terminal-text">No messages found. Be the first to write!</span>
        </div>
      `;
      return;
    }

    container.innerHTML = messages.map(message => this.renderMessage(message)).join('');
  }

  renderMessage(message: GuestbookEntry): string {
    const username = message.user?.username || "anonymous";
    const avatarUrl = message.user?.avatarUrl || "/default-avatar.png";
    const isOwner = this.user?.username === username;
    const timeAgo = this.formatTimeAgo(new Date(message.createdAt));
    
    return `
      <div class="terminal-message" data-message-id="${message.id}">
        <!-- Message Header -->
        <div class="terminal-header">
          <div class="terminal-user">
            <img src="${avatarUrl}" alt="${username}" class="terminal-avatar" />
            <span class="terminal-prompt">${username}@guestbook:~$</span>
            <span class="terminal-time"># ${timeAgo}</span>
          </div>
          <div class="terminal-actions">
            ${this.user ? `
              <button class="terminal-btn reply-btn" data-message-id="${message.id}" title="Reply">
                <svg viewBox="0 0 16 16" fill="currentColor">
                  <path d="M8.5 0L11 2.5L8.5 5V3H2V1H8.5V0ZM14 8V14H2V8H0V16H16V6H14V8Z"/>
                </svg>
              </button>
            ` : ''}
            ${isOwner ? `
              <button class="terminal-btn edit-message-btn" data-message-id="${message.id}" title="Edit">
                <svg viewBox="0 0 16 16" fill="currentColor">
                  <path d="M11.013 1.427a1.75 1.75 0 0 1 2.474 0l1.086 1.086a1.75 1.75 0 0 1 0 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 0 1-.927-.928l.929-3.25c.081-.286.235-.547.445-.758l8.61-8.61Zm.176 4.823L9.75 4.81l-6.286 6.287a.253.253 0 0 0-.064.108l-.558 1.953 1.953-.558a.253.253 0 0 0 .108-.064Zm1.238-3.763a.25.25 0 0 0-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 0 0 0-.354Z"/>
                </svg>
              </button>
              <button class="terminal-btn terminal-btn-danger delete-message-btn" data-message-id="${message.id}" title="Delete">
                <svg viewBox="0 0 16 16" fill="currentColor">
                  <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z"/>
                  <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z"/>
                </svg>
              </button>
            ` : ''}
          </div>
        </div>

        <!-- Message Content -->
        <div class="message-content" data-message-id="${message.id}">
          <div class="terminal-content">
            <span class="terminal-cursor">></span>
            <span class="terminal-text">${this.escapeHtml(message.message)}</span>
          </div>
        </div>

        <!-- Edit Form (Hidden) -->
        <div class="edit-message-form hidden" data-message-id="${message.id}">
          <div class="terminal-input-group">
            <span class="terminal-cursor">></span>
            <textarea class="terminal-input" rows="3" maxlength="500">${message.message}</textarea>
          </div>
          <div class="terminal-btn-group">
            <button class="terminal-btn terminal-btn-success update-message-btn" data-message-id="${message.id}">
              save
            </button>
            <button class="terminal-btn cancel-edit-message-btn" data-message-id="${message.id}">
              cancel
            </button>
          </div>
        </div>

        <!-- Replies Section -->
        ${this.renderReplies(message.replies || [], message.id)}

        <!-- Reply Form (Hidden) -->
        <div class="reply-form hidden" data-message-id="${message.id}">
          <div class="terminal-reply-form">
            <div class="terminal-input-group">
              <span class="terminal-cursor reply-cursor">└─></span>
              <textarea class="terminal-input" rows="2" maxlength="500" placeholder="Type your reply..."></textarea>
            </div>
            <div class="terminal-btn-group">
              <button class="terminal-btn terminal-btn-success submit-reply-btn" data-message-id="${message.id}">
                send
              </button>
              <button class="terminal-btn cancel-reply-btn" data-message-id="${message.id}">
                cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  renderReplies(replies: Reply[], messageId: string): string {
    if (!replies || replies.length === 0) return '';

    const visibleReplies = replies.slice(0, 1); // Show only first reply by default
    const hiddenReplies = replies.slice(1);

    return `
      <div class="terminal-replies" data-message-id="${messageId}">
        ${visibleReplies.map(reply => this.renderReply(reply, messageId)).join('')}
        ${hiddenReplies.length > 0 ? `
          <div class="show-more-replies">
            <button class="terminal-link show-more-btn" data-message-id="${messageId}">
              ├─ show ${hiddenReplies.length} more replies
            </button>
          </div>
          <div class="hidden-replies hidden">
            ${hiddenReplies.map(reply => this.renderReply(reply, messageId)).join('')}
          </div>
        ` : ''}
      </div>
    `;
  }

  renderReply(reply: Reply, messageId: string): string {
    const username = reply.author?.username || "anonymous";
    const avatarUrl = reply.author?.avatarUrl || "/default-avatar.png";
    const isOwner = this.user?.username === username;
    const timeAgo = this.formatTimeAgo(new Date(reply.createdAt));

    return `
      <div class="terminal-reply" data-reply-id="${reply.id}">
        <div class="terminal-reply-header">
          <div class="terminal-reply-user">
            <img src="${avatarUrl}" alt="${username}" class="terminal-reply-avatar" />
            <span class="terminal-reply-prompt">├─ ${username}:</span>
            <span class="terminal-time"># ${timeAgo}</span>
          </div>
          ${isOwner ? `
            <div class="terminal-actions">
              <button class="terminal-btn-sm edit-reply-btn" data-reply-id="${reply.id}" data-message-id="${messageId}" title="Edit">
                <svg viewBox="0 0 12 12" fill="currentColor">
                  <path d="M8.5 1L10 2.5L8.5 4V3H3V1H8.5V0Z"/>
                </svg>
              </button>
              <button class="terminal-btn-sm terminal-btn-danger delete-reply-btn" data-reply-id="${reply.id}" data-message-id="${messageId}" title="Delete">
                <svg viewBox="0 0 12 12" fill="currentColor">
                  <path d="M4 4V2H8V4H10V3H12V5H10V10H2V5H0V3H2V4H4ZM4 6V8H6V6H4ZM6 6V8H8V6H6Z"/>
                </svg>
              </button>
            </div>
          ` : ''}
        </div>

        <!-- Reply Content -->
        <div class="reply-content" data-reply-id="${reply.id}">
          <div class="terminal-reply-content">
            <span class="terminal-text">${this.escapeHtml(reply.content)}</span>
          </div>
        </div>

        <!-- Edit Reply Form (Hidden) -->
        <div class="edit-reply-form hidden" data-reply-id="${reply.id}">
          <div class="terminal-input-group">
            <span class="terminal-cursor reply-cursor">├─></span>
            <textarea class="terminal-input terminal-input-sm" rows="2" maxlength="500">${reply.content}</textarea>
          </div>
          <div class="terminal-btn-group">
            <button class="terminal-btn-sm terminal-btn-success update-reply-btn" data-reply-id="${reply.id}" data-message-id="${messageId}">
              save
            </button>
            <button class="terminal-btn-sm cancel-edit-reply-btn" data-reply-id="${reply.id}">
              cancel
            </button>
          </div>
        </div>
      </div>
    `;
  }

  formatTimeAgo(date: Date): string {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return 'now';
    if (minutes < 60) return `${minutes}m`;
    if (hours < 24) return `${hours}h`;
    return `${days}d`;
  }

  escapeHtml(text: string): string {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  showToast(message: string, type: 'success' | 'error') {
    // Create toast notification with terminal styling
    const toast = document.createElement('div');
    toast.className = `terminal-toast terminal-toast-${type}`;
    
    const icon = type === 'success' ? '✓' : '✗';
    const prefix = type === 'success' ? 'success' : 'error';
    
    toast.innerHTML = `
      <span class="terminal-prompt">${prefix}@guestbook:~$</span>
      <span class="terminal-text">${icon} ${message}</span>
    `;
    
    document.body.appendChild(toast);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      toast.classList.add('fade-out');
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }

  // Confirmation dialog with terminal styling
  showConfirmDialog(message: string, onConfirm: () => void) {
    const overlay = document.createElement('div');
    overlay.className = 'terminal-overlay';
    
    overlay.innerHTML = `
      <div class="terminal-dialog">
        <div class="terminal-dialog-header">
          <span class="terminal-prompt">confirm@guestbook:~$</span>
        </div>
        <div class="terminal-dialog-content">
          <p class="terminal-text">${message}</p>
        </div>
        <div class="terminal-dialog-actions">
          <button class="terminal-btn terminal-btn-danger confirm-yes">yes</button>
          <button class="terminal-btn confirm-no">no</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(overlay);
    
    overlay.querySelector('.confirm-yes')?.addEventListener('click', () => {
      onConfirm();
      overlay.remove();
    });
    
    overlay.querySelector('.confirm-no')?.addEventListener('click', () => {
      overlay.remove();
    });
    
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) overlay.remove();
    });
  }
}

let guestbookManager: GuestbookManager;

document.addEventListener('DOMContentLoaded', () => {
  guestbookManager = new GuestbookManager();

  // Event delegation
  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    
    // Show more replies
    if (target.closest('.show-more-btn')) {
      const btn = target.closest('.show-more-btn') as HTMLElement;
      const messageId = btn.dataset.messageId!;
      const hiddenReplies = document.querySelector(`.terminal-replies[data-message-id="${messageId}"] .hidden-replies`);
      const showMore = document.querySelector(`.terminal-replies[data-message-id="${messageId}"] .show-more-replies`);
      
      if (hiddenReplies && showMore) {
        hiddenReplies.classList.remove('hidden');
        showMore.style.display = 'none';
      }
    }
    
    // Message actions
    if (target.closest('.edit-message-btn')) {
      const btn = target.closest('.edit-message-btn') as HTMLElement;
      toggleEditMessage(btn.dataset.messageId!);
    }
    
    if (target.closest('.delete-message-btn')) {
      const btn = target.closest('.delete-message-btn') as HTMLElement;
      guestbookManager.showConfirmDialog(
        'Are you sure you want to delete this message?',
        () => deleteMessage(btn.dataset.messageId!)
      );
    }
    
    if (target.closest('.update-message-btn')) {
      const btn = target.closest('.update-message-btn') as HTMLElement;
      await updateMessage(btn.dataset.messageId!);
    }
    
    if (target.closest('.cancel-edit-message-btn')) {
      const btn = target.closest('.cancel-edit-message-btn') as HTMLElement;
      toggleEditMessage(btn.dataset.messageId!, false);
    }
    
    if (target.closest('.reply-btn')) {
      const btn = target.closest('.reply-btn') as HTMLElement;
      toggleReplyForm(btn.dataset.messageId!);
    }
    
    if (target.closest('.submit-reply-btn')) {
      const btn = target.closest('.submit-reply-btn') as HTMLElement;
      await submitReply(btn.dataset.messageId!);
    }
    
    if (target.closest('.cancel-reply-btn')) {
      const btn = target.closest('.cancel-reply-btn') as HTMLElement;
      toggleReplyForm(btn.dataset.messageId!, false);
    }

    // Reply actions
    if (target.closest('.edit-reply-btn')) {
      const btn = target.closest('.edit-reply-btn') as HTMLElement;
      toggleEditReply(btn.dataset.replyId!);
    }
    
    if (target.closest('.delete-reply-btn')) {
      const btn = target.closest('.delete-reply-btn') as HTMLElement;
      guestbookManager.showConfirmDialog(
        'Delete this reply?',
        () => deleteReply(btn.dataset.replyId!, btn.dataset.messageId!)
      );
    }
    
    if (target.closest('.update-reply-btn')) {
      const btn = target.closest('.update-reply-btn') as HTMLElement;
      await updateReply(btn.dataset.replyId!, btn.dataset.messageId!);
    }
    
    if (target.closest('.cancel-edit-reply-btn')) {
      const btn = target.closest('.cancel-edit-reply-btn') as HTMLElement;
      toggleEditReply(btn.dataset.replyId!, false);
    }
  });
});

// Helper functions
function toggleEditMessage(messageId: string, show: boolean = true) {
  const content = document.querySelector(`.message-content[data-message-id="${messageId}"]`);
  const form = document.querySelector(`.edit-message-form[data-message-id="${messageId}"]`);
  
  if (content && form) {
    if (show) {
      content.classList.add('hidden');
      form.classList.remove('hidden');
      (form.querySelector('textarea') as HTMLTextAreaElement)?.focus();
    } else {
      content.classList.remove('hidden');
      form.classList.add('hidden');
    }
  }
}

function toggleReplyForm(messageId: string, show: boolean = true) {
  const form = document.querySelector(`.reply-form[data-message-id="${messageId}"]`);
  if (form) {
    if (show) {
      form.classList.remove('hidden');
      (form.querySelector('textarea') as HTMLTextAreaElement)?.focus();
    } else {
      form.classList.add('hidden');
      (form.querySelector('textarea') as HTMLTextAreaElement).value = '';
    }
  }
}

function toggleEditReply(replyId: string, show: boolean = true) {
  const content = document.querySelector(`.reply-content[data-reply-id="${replyId}"]`);
  const form = document.querySelector(`.edit-reply-form[data-reply-id="${replyId}"]`);
  
  if (content && form) {
    if (show) {
      content.classList.add('hidden');
      form.classList.remove('hidden');
      (form.querySelector('textarea') as HTMLTextAreaElement)?.focus();
    } else {
      content.classList.remove('hidden');
      form.classList.add('hidden');
    }
  }
}

async function deleteMessage(messageId: string) {
  try {
    const response = await fetch('/api/guestbook', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: messageId })
    });

    if (response.ok) {
      guestbookManager.showToast('Message deleted successfully', 'success');
      await guestbookManager.loadMessages();
    } else {
      guestbookManager.showToast('Failed to delete message', 'error');
    }
  } catch (error) {
    console.error('Error deleting message:', error);
    guestbookManager.showToast('Network error', 'error');
  }
}

async function updateMessage(messageId: string) {
  const form = document.querySelector(`.edit-message-form[data-message-id="${messageId}"]`);
  const textarea = form?.querySelector('textarea') as HTMLTextAreaElement;
  const newMessage = textarea?.value.trim();

  if (!newMessage) return;

  try {
    const response = await fetch('/api/guestbook', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: messageId, message: newMessage })
    });

    if (response.ok) {
      guestbookManager.showToast('Message updated', 'success');
      await guestbookManager.loadMessages();
    } else {
      guestbookManager.showToast('Update failed', 'error');
    }
  } catch (error) {
    console.error('Error updating message:', error);
    guestbookManager.showToast('Network error', 'error');
  }
}

async function submitReply(messageId: string) {
  const form = document.querySelector(`.reply-form[data-message-id="${messageId}"]`);
  const textarea = form?.querySelector('textarea') as HTMLTextAreaElement;
  const content = textarea?.value.trim();

  if (!content) return;

  try {
    const response = await fetch('/api/replies', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        guestbookEntryId: messageId,
        content: content
      })
    });

    if (response.ok) {
      guestbookManager.showToast('Reply sent', 'success');
      toggleReplyForm(messageId, false);
      await guestbookManager.loadMessages();
    } else {
      guestbookManager.showToast('Reply failed', 'error');
    }
  } catch (error) {
    console.error('Error submitting reply:', error);
    guestbookManager.showToast('Network error', 'error');
  }
}

async function deleteReply(replyId: string, messageId: string) {
  try {
    const response = await fetch('/api/replies', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: replyId })
    });

    if (response.ok) {
      guestbookManager.showToast('Reply deleted', 'success');
      await guestbookManager.loadMessages();
    } else {
      guestbookManager.showToast('Delete failed', 'error');
    }
  } catch (error) {
    console.error('Error deleting reply:', error);
    guestbookManager.showToast('Network error', 'error');
  }
}

async function updateReply(replyId: string, messageId: string) {
  const form = document.querySelector(`.edit-reply-form[data-reply-id="${replyId}"]`);
  const textarea = form?.querySelector('textarea') as HTMLTextAreaElement;
  const newContent = textarea?.value.trim();

  if (!newContent) return;

  try {
    const response = await fetch('/api/replies', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: replyId, content: newContent })
    });

    if (response.ok) {
      guestbookManager.showToast('Reply updated', 'success');
      await guestbookManager.loadMessages();
    } else {
      guestbookManager.showToast('Update failed', 'error');
    }
  } catch (error) {
    console.error('Error updating reply:', error);
    guestbookManager.showToast('Network error', 'error');
  }
}
</script>