---
import Layout from '../layouts/Layout.astro';

const isLogin = Astro.cookies.get("user_session")?.value;
---

<Layout title="Guestbook - Portfolio">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-4 text-[var(--color-primary)]">Guestbook</h1>
      <p class="text-xl text-[var(--color-secondary)]">
        Leave a message and let me know you were here!
      </p>
    </div>

    {/* Auth section */}
    <div id="auth-section" class="terminal-card mb-8">
      <div id="login-prompt" class="text-center">
        <p class="mb-4 text-[var(--color-text)]">Sign in with GitHub to leave a message</p>
        <button
          id="github-login-btn"
          class="inline-flex items-center px-6 py-3 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all"
        >
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"></path>
          </svg>
          Sign in with GitHub
        </button>
      </div>

      <div id="user-info" class="hidden">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-3">
            <img id="user-avatar" class="w-10 h-10 rounded-full" alt="User avatar">
            <div>
              <p class="font-semibold text-[var(--color-text)]">Signed in as <span id="username"></span></p>
            </div>
          </div>
          <button
            id="signout-btn"
            class="px-4 py-2 text-sm glass rounded hover:bg-[var(--color-border)] transition-colors"
          >
            Sign out
          </button>
        </div>
      </div>
    </div>

    {/* Message form */}
    <div id="message-form" class="terminal-card mb-8 hidden">
      <form id="guestbook-form">
        <div class="mb-4">
          <label for="message" class="block text-sm font-medium text-[var(--color-text)] mb-2">
            Your message
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            maxlength="500"
            placeholder="Leave a nice message..."
            class="w-full px-3 py-2 glass rounded-lg text-[var(--color-text)] placeholder-[var(--color-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)]"
          ></textarea>
          <div class="text-xs text-[var(--color-secondary)] mt-1">
            <span id="char-count">0</span>/500 characters
          </div>
        </div>
        <button
          type="submit"
          class="px-6 py-2 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[var(--color-accent)] hover:text-black transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Post Message
        </button>
      </form>
    </div>

    {/* Messages */}
    <div class="space-y-4">
      <h2 class="text-2xl font-semibold text-[var(--color-accent)] mb-6">Messages</h2>
      <div id="messages-container">
        {/* Loading state */}
        <div id="loading" class="text-center py-8">
          <div class="animate-spin w-8 h-8 border-2 border-[var(--color-primary)] border-t-transparent rounded-full mx-auto"></div>
          <p class="mt-2 text-[var(--color-secondary)]">Loading messages...</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  interface GuestbookEntry {
    id: string;
    message: string;
    createdAt: string;
    user: {
      id: string;
      username: string;
      avatarUrl: string | null;
    };
    replies?: Reply[];
  }

  interface Reply {
    id: string;
    content: string;
    createdAt: string;
    author: {
      id: string;
      username: string;
      avatarUrl: string | null;
    };
  }

  class GuestbookManager {
    user: {
      id: string;
      username: string;
      avatarUrl: string | null;
    } | null = null;
    messages: GuestbookEntry[] = [];

    constructor() {
      this.init();
    }

    async init() {
      await this.checkAuthStatus();
      this.bindEvents();
      await this.loadMessages();
    }

    async checkAuthStatus() {
      try {
        const response = await fetch('/api/auth/status');
        if (response.ok) {
          this.user = await response.json();
          this.showUserInfo();
        } else {
          this.showLoginPrompt();
        }
      } catch (error) {
        console.error('Error checking auth status:', error);
        this.showLoginPrompt();
      }
    }

    showLoginPrompt() {
      document.getElementById('login-prompt')?.classList.remove('hidden');
      document.getElementById('user-info')?.classList.add('hidden');
      document.getElementById('message-form')?.classList.add('hidden');
    }

    showUserInfo() {
      document.getElementById('login-prompt')?.classList.add('hidden');
      document.getElementById('user-info')?.classList.remove('hidden');
      document.getElementById('message-form')?.classList.remove('hidden');

      const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
      if (userAvatar && this.user) {
        userAvatar.src = this.user.avatarUrl || '/default-avatar.png';
      }
      const usernameElement = document.getElementById('username');
      if (usernameElement && this.user) {
        usernameElement.textContent = this.user.username;
      }
    }

    bindEvents() {
      // GitHub login
      document.getElementById('github-login-btn')?.addEventListener('click', () => {
        window.location.href = '/api/auth/github';
      });

      // Sign out
      document.getElementById('signout-btn')?.addEventListener('click', async () => {
        try {
          await fetch('/api/auth/signout', { method: 'POST' });
          this.user = null;
          this.showLoginPrompt();
          await this.loadMessages();
        } catch (error) {
          console.error('Error signing out:', error);
        }
      });

      // Character counter
      const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
      const charCount = document.getElementById('char-count');
      messageTextarea?.addEventListener('input', () => {
        if (charCount) {
          charCount.textContent = messageTextarea.value.length.toString();
        }
      });

      // Form submission
      document.getElementById('guestbook-form')?.addEventListener('submit', async (e: Event) => {
        e.preventDefault();
        await this.submitMessage(e);
      });
    }

    async submitMessage(e: Event) {
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const message = formData.get('message')?.toString();

      if (!message || !message.trim()) return;

      try {
        const response = await fetch('/api/guestbook', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message: message.trim() })
        });

        if (response.ok) {
          form.reset();
          const charCount = document.getElementById('char-count');
          if (charCount) charCount.textContent = '0';
          await this.loadMessages();
        } else {
          const error = await response.json();
          alert(error.message || 'Failed to post message');
        }
      } catch (error) {
        console.error('Error posting message:', error);
        alert('Failed to post message');
      }
    }

    async loadMessages() {
      try {
        const response = await fetch('/api/guestbook');
        this.messages = await response.json();
        this.renderMessages(this.messages);
      } catch (error) {
        console.error('Error loading messages:', error);
        const container = document.getElementById('messages-container');
        if (container) {
          container.innerHTML = `
            <div class="text-center py-8 text-[var(--color-secondary)]">
              Failed to load messages
            </div>
          `;
        }
      }
    }

    renderMessages(messages: GuestbookEntry[]) {
      const container = document.getElementById('messages-container');
      if (!container) return;

      if (messages.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-4">ðŸ’­</div>
            <p class="text-[var(--color-secondary)]">No messages yet. Be the first to leave one!</p>
          </div>
        `;
        return;
      }

      container.innerHTML = messages.map(message => this.renderMessage(message)).join('');
    }

renderMessage(message: GuestbookEntry): string {
  const username = message.user?.username || "Unknown User";
  const avatarUrl = message.user?.avatarUrl || "/default-avatar.png";
  const isOwner = this.user?.username === username;
  
  return `
    <div class="terminal-card mb-4 hover:shadow-lg transition-all duration-300 hover:scale-[1.02] hover:border-primary/50">
      <div class="flex flex-col sm:flex-row sm:items-start space-y-3 sm:space-y-0 sm:space-x-4">
        <div class="relative flex-shrink-0">
              <img
                src="${avatarUrl}"
                alt="${username}"
                class="w-12 h-12 rounded-full border-2 border-[#45475a] transition-all duration-300 group-hover:border-[#89b4fa] group-hover:shadow-lg group-hover:shadow-[#89b4fa]/30"
              />
              <div class="absolute -top-1 -right-1 w-4 h-4 bg-[#a6e3a1] rounded-full border-2 border-[#1e1e2e] shadow-sm animate-pulse"></div>
            </div>
            
            <div class="flex-1 min-w-0">
              <!-- Enhanced Message Header -->
              <div class="flex items-center justify-between mb-3 flex-wrap gap-2">
                <div class="flex items-center space-x-3 min-w-0">
                  <span class="font-bold text-[#f9e2af] text-lg truncate">${username}</span>
                  <div class="flex items-center space-x-2 text-sm text-[#9399b2]">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                    </svg>
                    <span>${new Date(message.createdAt).toLocaleDateString()}</span>
                  </div>
                </div>
                
                <!-- Enhanced Action Buttons -->
                <div class="flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                  ${isOwner ? `
                    <button class="action-btn edit-message-btn bg-[#313244] hover:bg-[#45475a] text-[#89b4fa] px-3 py-2 rounded-lg border border-[#45475a] hover:border-[#89b4fa] transition-all duration-200 flex items-center space-x-1 text-sm hover:shadow-lg hover:shadow-[#89b4fa]/20" data-message-id="${message.id}" title="Edit Message">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                      <span class="hidden sm:inline">Edit</span>
                    </button>
                    <button class="action-btn delete-message-btn bg-[#313244] hover:bg-[#f38ba8] text-[#f38ba8] hover:text-white px-3 py-2 rounded-lg border border-[#45475a] hover:border-[#f38ba8] transition-all duration-200 flex items-center space-x-1 text-sm hover:shadow-lg hover:shadow-[#f38ba8]/20" data-message-id="${message.id}" title="Delete Message">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                      <span class="hidden sm:inline">Delete</span>
                    </button>
                  ` : ''}
                  ${this.user ? `
                    <button class="action-btn reply-btn bg-[#313244] hover:bg-[#45475a] text-[#cba6f7] px-3 py-2 rounded-lg border border-[#45475a] hover:border-[#cba6f7] transition-all duration-200 flex items-center space-x-1 text-sm hover:shadow-lg hover:shadow-[#cba6f7]/20" data-message-id="${message.id}" title="Reply to Message">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"></path>
                      </svg>
                      <span class="hidden sm:inline">Reply</span>
                    </button>
                  ` : ''}
                </div>
              </div>

          <!-- Message Content -->
          <div class="message-content mb-4" data-message-id="${message.id}">
            <div class="bg-surface/30 rounded-lg p-4 border border-border/50 hover:border-primary/30 transition-colors duration-300">
              <p class="text-text whitespace-pre-wrap leading-relaxed text-sm sm:text-base">${this.escapeHtml(message.message)}</p>
            </div>
          </div>

          <!-- Edit Message Form (Hidden) -->
          <div class="edit-message-form hidden mb-4" data-message-id="${message.id}">
            <div class="space-y-3">
              <textarea
                class="w-full px-4 py-3 bg-surface/50 border border-border/50 rounded-lg text-text placeholder-secondary/70 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-all duration-300 resize-none"
                rows="4"
                maxlength="500"
                placeholder="Edit your message..."
              >${message.message}</textarea>
              <div class="flex flex-col sm:flex-row gap-2">
                <button class="btn-primary update-message-btn flex-1 sm:flex-none" data-message-id="${message.id}">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Update Message
                </button>
                <button class="btn-secondary cancel-edit-message-btn flex-1 sm:flex-none" data-message-id="${message.id}">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Cancel
                </button>
              </div>
            </div>
          </div>

          <!-- Replies Section -->
          ${this.renderReplies(message.replies || [], message.id)}

          <!-- Reply Form (Hidden) -->
          <div class="reply-form hidden mt-4" data-message-id="${message.id}">
            <div class="pl-4 sm:pl-6 border-l-2 border-accent/50 bg-surface/20 rounded-r-lg p-4">
              <div class="space-y-3">
                <textarea
                  class="w-full px-4 py-3 bg-surface/50 border border-border/50 rounded-lg text-text placeholder-secondary/70 focus:outline-none focus:ring-2 focus:ring-accent/50 focus:border-accent/50 transition-all duration-300 resize-none"
                  rows="3"
                  maxlength="500"
                  placeholder="Write your reply..."
                ></textarea>
                <div class="flex flex-col sm:flex-row gap-2">
                  <button class="btn-primary submit-reply-btn flex-1 sm:flex-none" data-message-id="${message.id}">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                    </svg>
                    Submit Reply
                  </button>
                  <button class="btn-secondary cancel-reply-btn flex-1 sm:flex-none" data-message-id="${message.id}">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
}

renderReplies(replies: Reply[], messageId: string): string {
  if (!replies || replies.length === 0) return '';

  const visibleReplies = replies.slice(0, 1); // Show only first reply by default
  const hiddenReplies = replies.slice(1);
  const hasMoreReplies = hiddenReplies.length > 0;

  return `
    <div class="mt-4 pl-4 sm:pl-6 border-l-2 border-primary/30 space-y-3">
      <div class="replies-visible" data-message-id="${messageId}">
        ${visibleReplies.map(reply => this.renderReply(reply, messageId)).join('')}
      </div>
      
      ${hasMoreReplies ? `
        <div class="replies-hidden hidden" data-message-id="${messageId}">
          ${hiddenReplies.map(reply => this.renderReply(reply, messageId)).join('')}
        </div>
        
        <button class="show-more-replies-btn text-sm text-primary hover:text-accent transition-colors duration-200 flex items-center space-x-2 px-3 py-2 bg-surface/30 rounded-lg border border-border/30 hover:border-primary/50 hover:bg-surface/50" data-message-id="${messageId}">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
          <span>Show ${hiddenReplies.length} more ${hiddenReplies.length === 1 ? 'reply' : 'replies'}</span>
        </button>
        
        <button class="show-less-replies-btn hidden text-sm text-secondary hover:text-primary transition-colors duration-200 flex items-center space-x-2 px-3 py-2 bg-surface/30 rounded-lg border border-border/30 hover:border-primary/50 hover:bg-surface/50" data-message-id="${messageId}">
          <svg class="w-4 h-4 transform rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
          <span>Show less</span>
        </button>
      ` : ''}
    </div>
  `;
}

renderReply(reply: Reply, messageId: string): string {
  const username = reply.author?.username || "Unknown User";
  const avatarUrl = reply.author?.avatarUrl || "/default-avatar.png";
  const isOwner = this.user?.username === username;

  return `
    <div class="reply-item bg-surface/40 p-3 sm:p-4 rounded-lg border border-border/30 hover:border-primary/30 transition-all duration-300 hover:bg-surface/60">
      <div class="flex flex-col sm:flex-row sm:items-start space-y-2 sm:space-y-0 sm:space-x-3">
        <div class="flex items-center sm:items-start space-x-3 sm:space-x-0 sm:flex-col sm:items-center">
          <img
            src="${avatarUrl}"
            alt="${username}"
            class="w-7 h-7 sm:w-8 sm:h-8 rounded-full border border-primary/30 hover:border-primary/60 transition-colors duration-300"
          />
          <div class="sm:hidden flex-1">
            <div class="flex items-center justify-between">
              <span class="font-semibold text-sm text-secondary">${username}</span>
              <span class="text-xs text-secondary/70">
                ${new Date(reply.createdAt).toLocaleDateString()}
              </span>
            </div>
          </div>
        </div>
        
        <div class="flex-1 min-w-0">
          <!-- Desktop Reply Header -->
          <div class="hidden sm:flex items-center justify-between mb-2">
            <div class="flex items-center space-x-2">
              <span class="font-semibold text-sm text-secondary hover:text-primary transition-colors duration-200">${username}</span>
              <span class="text-xs text-secondary/70 bg-surface/50 px-2 py-1 rounded-full">
                ${new Date(reply.createdAt).toLocaleDateString()}
              </span>
            </div>
            ${isOwner ? `
              <div class="flex items-center space-x-1">
                <button class="action-btn-sm edit-reply-btn group" data-reply-id="${reply.id}" data-message-id="${messageId}" title="Edit">
                  <svg class="w-3 h-3 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                </button>
                <button class="action-btn-sm delete-reply-btn group hover:bg-red-500/20 hover:border-red-500/50" data-reply-id="${reply.id}" data-message-id="${messageId}" title="Delete">
                  <svg class="w-3 h-3 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            ` : ''}
          </div>

          <!-- Mobile Reply Actions -->
          ${isOwner ? `
            <div class="sm:hidden flex justify-end space-x-1 mb-2">
              <button class="action-btn-sm edit-reply-btn" data-reply-id="${reply.id}" data-message-id="${messageId}" title="Edit">
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              <button class="action-btn-sm delete-reply-btn hover:bg-red-500/20" data-reply-id="${reply.id}" data-message-id="${messageId}" title="Delete">
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          ` : ''}

          <!-- Reply Content -->
          <div class="reply-content" data-reply-id="${reply.id}">
            <div class="bg-background/30 rounded-lg p-3 border border-border/20">
              <p class="text-sm text-text whitespace-pre-wrap leading-relaxed">${this.escapeHtml(reply.content)}</p>
            </div>
          </div>

          <!-- Edit Reply Form (Hidden) -->
          <div class="edit-reply-form hidden mt-2" data-reply-id="${reply.id}">
            <div class="space-y-2">
              <textarea
                class="w-full px-3 py-2 bg-surface/50 border border-border/50 rounded-lg text-sm text-text placeholder-secondary/70 focus:outline-none focus:ring-1 focus:ring-primary/50 focus:border-primary/50 transition-all duration-300 resize-none"
                rows="3"
                maxlength="500"
                placeholder="Edit your reply..."
              >${reply.content}</textarea>
              <div class="flex flex-col sm:flex-row gap-2">
                <button class="btn-primary-sm update-reply-btn flex-1 sm:flex-none" data-reply-id="${reply.id}" data-message-id="${messageId}">
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Update
                </button>
                <button class="btn-secondary-sm cancel-edit-reply-btn flex-1 sm:flex-none" data-reply-id="${reply.id}">
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
}

escapeHtml(text: string): string {
  const div = document.createElement("div");
  div.textContent = text;
  return div.innerHTML;
  }
}

let guestbookManager: GuestbookManager;

document.addEventListener('DOMContentLoaded', () => {
  guestbookManager = new GuestbookManager();

  // Event delegation for dynamic content
  document.addEventListener('click', async (e) => {
    const target = e.target as HTMLElement;
    
    // Message actions
    if (target.closest('.edit-message-btn')) {
      const btn = target.closest('.edit-message-btn') as HTMLElement;
      toggleEditMessage(btn.dataset.messageId!);
    }
    
    if (target.closest('.delete-message-btn')) {
      const btn = target.closest('.delete-message-btn') as HTMLElement;
      await deleteMessage(btn.dataset.messageId!);
    }
    
    if (target.closest('.update-message-btn')) {
      const btn = target.closest('.update-message-btn') as HTMLElement;
      await updateMessage(btn.dataset.messageId!);
    }
    
    if (target.closest('.cancel-edit-message-btn')) {
      const btn = target.closest('.cancel-edit-message-btn') as HTMLElement;
      toggleEditMessage(btn.dataset.messageId!, false);
    }
    
    if (target.closest('.reply-btn')) {
      const btn = target.closest('.reply-btn') as HTMLElement;
      toggleReplyForm(btn.dataset.messageId!);
    }
    
    if (target.closest('.submit-reply-btn')) {
      const btn = target.closest('.submit-reply-btn') as HTMLElement;
      await submitReply(btn.dataset.messageId!);
    }
    
    if (target.closest('.cancel-reply-btn')) {
      const btn = target.closest('.cancel-reply-btn') as HTMLElement;
      toggleReplyForm(btn.dataset.messageId!, false);
    }

    // Reply actions
    if (target.closest('.edit-reply-btn')) {
      const btn = target.closest('.edit-reply-btn') as HTMLElement;
      toggleEditReply(btn.dataset.replyId!);
    }
    
    if (target.closest('.delete-reply-btn')) {
      const btn = target.closest('.delete-reply-btn') as HTMLElement;
      await deleteReply(btn.dataset.replyId!, btn.dataset.messageId!);
    }
    
    if (target.closest('.update-reply-btn')) {
      const btn = target.closest('.update-reply-btn') as HTMLElement;
      await updateReply(btn.dataset.replyId!, btn.dataset.messageId!);
    }
    
    if (target.closest('.cancel-edit-reply-btn')) {
      const btn = target.closest('.cancel-edit-reply-btn') as HTMLElement;
      toggleEditReply(btn.dataset.replyId!, false);
    }

    // Show more/less replies
    if (target.closest('.show-more-replies-btn')) {
      const btn = target.closest('.show-more-replies-btn') as HTMLElement;
      const messageId = btn.dataset.messageId!;
      toggleShowMoreReplies(messageId, true);
    }
    
    if (target.closest('.show-less-replies-btn')) {
      const btn = target.closest('.show-less-replies-btn') as HTMLElement;
      const messageId = btn.dataset.messageId!;
      toggleShowMoreReplies(messageId, false);
    }
  });
});

// Helper function for show more/less replies
function toggleShowMoreReplies(messageId: string, show: boolean) {
  const hiddenReplies = document.querySelector(`.replies-hidden[data-message-id="${messageId}"]`);
  const showMoreBtn = document.querySelector(`.show-more-replies-btn[data-message-id="${messageId}"]`);
  const showLessBtn = document.querySelector(`.show-less-replies-btn[data-message-id="${messageId}"]`);
  
  if (show) {
    hiddenReplies?.classList.remove('hidden');
    showMoreBtn?.classList.add('hidden');
    showLessBtn?.classList.remove('hidden');
  } else {
    hiddenReplies?.classList.add('hidden');
    showMoreBtn?.classList.remove('hidden');
    showLessBtn?.classList.add('hidden');
  }
}

  // Helper functions
  function toggleEditMessage(messageId: string, show: boolean = true) {
    const content = document.querySelector(`.message-content[data-message-id="${messageId}"]`);
    const form = document.querySelector(`.edit-message-form[data-message-id="${messageId}"]`);
    
    if (content && form) {
      if (show) {
        content.classList.add('hidden');
        form.classList.remove('hidden');
      } else {
        content.classList.remove('hidden');
        form.classList.add('hidden');
      }
    }
  }

  function toggleReplyForm(messageId: string, show: boolean = true) {
    const form = document.querySelector(`.reply-form[data-message-id="${messageId}"]`);
    if (form) {
      if (show) {
        form.classList.remove('hidden');
        (form.querySelector('textarea') as HTMLTextAreaElement)?.focus();
      } else {
        form.classList.add('hidden');
        (form.querySelector('textarea') as HTMLTextAreaElement).value = '';
      }
    }
  }

  function toggleEditReply(replyId: string, show: boolean = true) {
    const content = document.querySelector(`.reply-content[data-reply-id="${replyId}"]`);
    const form = document.querySelector(`.edit-reply-form[data-reply-id="${replyId}"]`);
    
    if (content && form) {
      if (show) {
        content.classList.add('hidden');
        form.classList.remove('hidden');
      } else {
        content.classList.remove('hidden');
        form.classList.add('hidden');
      }
    }
  }

  async function deleteMessage(messageId: string) {
    if (!confirm('Are you sure you want to delete this message?')) return;
    
    try {
      const response = await fetch('/api/guestbook', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: messageId })
      });

      if (response.ok) {
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to delete message');
      }
    } catch (error) {
      console.error('Error deleting message:', error);
      alert('Failed to delete message');
    }
  }

  async function updateMessage(messageId: string) {
    const form = document.querySelector(`.edit-message-form[data-message-id="${messageId}"]`);
    const textarea = form?.querySelector('textarea') as HTMLTextAreaElement;
    const newMessage = textarea?.value.trim();

    if (!newMessage) return;

    try {
      const response = await fetch('/api/guestbook', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: messageId, message: newMessage })
      });

      if (response.ok) {
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to update message');
      }
    } catch (error) {
      console.error('Error updating message:', error);
      alert('Failed to update message');
    }
  }

  async function submitReply(messageId: string) {
    const form = document.querySelector(`.reply-form[data-message-id="${messageId}"]`);
    const textarea = form?.querySelector('textarea') as HTMLTextAreaElement;
    const content = textarea?.value.trim();

    if (!content) return;

    try {
      const response = await fetch('/api/replies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          guestbookEntryId: messageId,
          content: content
        })
      });

      if (response.ok) {
        toggleReplyForm(messageId, false);
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to submit reply');
      }
    } catch (error) {
      console.error('Error submitting reply:', error);
      alert('Failed to submit reply');
    }
  }

  async function deleteReply(replyId: string, messageId: string) {
    if (!confirm('Are you sure you want to delete this reply?')) return;
    
    try {
      const response = await fetch('/api/replies', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: replyId })
      });

      if (response.ok) {
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to delete reply');
      }
    } catch (error) {
      console.error('Error deleting reply:', error);
      alert('Failed to delete reply');
    }
  }

  async function updateReply(replyId: string, messageId: string) {
    const form = document.querySelector(`.edit-reply-form[data-reply-id="${replyId}"]`);
    const textarea = form?.querySelector('textarea') as HTMLTextAreaElement;
    const newContent = textarea?.value.trim();

    if (!newContent) return;

    try {
      const response = await fetch('/api/replies', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: replyId, content: newContent })
      });

      if (response.ok) {
        await guestbookManager.loadMessages();
      } else {
        const error = await response.json();
        alert(error.message || 'Failed to update reply');
      }
    } catch (error) {
      console.error('Error updating reply:', error);
      alert('Failed to update reply');
    }
  }
</script>