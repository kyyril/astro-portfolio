---
import Layout from '../layouts/Layout.astro';
import OptimizedImage from '../components/OptimizedImage.astro';
import { projects } from '../data/portfolio';
---

<Layout title="Projects - Portfolio">
  <div class="max-w-6xl mx-auto px-4 py-12">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold mb-4 text-[var(--color-primary)]">Projects</h1>
      <p class="text-xl text-[var(--color-secondary)]">
        A collection of my work showcasing various technologies and solutions
      </p>
    </div>

    <!-- Filter buttons -->
    <div class="flex flex-wrap justify-center gap-2 mb-8">
      <button class="filter-btn active px-4 py-2 rounded-lg border border-[var(--color-border)] bg-[var(--color-surface)] text-[var(--color-text)] hover:bg-[var(--color-primary)] hover:text-white transition-all" data-filter="all">All</button>
      <button class="filter-btn px-4 py-2 rounded-lg border border-[var(--color-border)] bg-[var(--color-surface)] text-[var(--color-text)] hover:bg-[var(--color-primary)] hover:text-white transition-all" data-filter="web">Web</button>
      <button class="filter-btn px-4 py-2 rounded-lg border border-[var(--color-border)] bg-[var(--color-surface)] text-[var(--color-text)] hover:bg-[var(--color-primary)] hover:text-white transition-all" data-filter="mobile">Mobile</button>
      <button class="filter-btn px-4 py-2 rounded-lg border border-[var(--color-border)] bg-[var(--color-surface)] text-[var(--color-text)] hover:bg-[var(--color-primary)] hover:text-white transition-all" data-filter="desktop">Desktop</button>
      <button class="filter-btn px-4 py-2 rounded-lg border border-[var(--color-border)] bg-[var(--color-surface)] text-[var(--color-text)] hover:bg-[var(--color-primary)] hover:text-white transition-all" data-filter="library">Library</button>
    </div>

    <!-- Optimized projects grid -->
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      {projects.map((project, index) => (
        <div class={`project-card terminal-card ${project.category}`} data-category={project.category}>
          {project.featured && (
            <div class="absolute top-2 right-2 px-2 py-1 text-xs bg-[var(--color-accent)] text-black rounded">
              Featured
            </div>
          )}

          <div class="relative mb-4 aspect-video overflow-hidden rounded-lg">
            <OptimizedImage
              src={project.images[0]}
              alt={project.title}
              class="w-full h-full object-cover"
              loading={index < 6 ? "eager" : "lazy"}
              decoding="async"
              width={400}
              height={225}
              fetchpriority={index < 3 ? "high" : "auto"}
              quality={85}
              format="webp"
            />
          </div>

          <div class="space-y-3">
            <div class="flex items-center justify-between">
              <h3 class="text-xl font-semibold text-[var(--color-accent)]">{project.title}</h3>
              <span class="text-sm text-[var(--color-secondary)] capitalize">{project.type}</span>
            </div>

            <p class="text-[var(--color-text)] text-sm line-clamp-3">{project.description}</p>

            <div class="flex flex-wrap gap-1">
              {project.technologies.slice(0, 3).map(tech => (
                <span class="px-2 py-1 text-xs bg-[var(--color-surface)] text-[var(--color-secondary)] border border-[var(--color-border)] rounded">{tech}</span>
              ))}
              {project.technologies.length > 3 && (
                <span class="px-2 py-1 text-xs bg-[var(--color-surface)] text-[var(--color-secondary)] border border-[var(--color-border)] rounded">+{project.technologies.length - 3}</span>
              )}
            </div>

            <div class="flex space-x-2 pt-2">
              <a
                href={`/projects/${project.id}`}
                class="flex-1 text-center py-2 px-4 bg-[var(--color-surface)] border border-[var(--color-border)] text-[var(--color-text)] rounded hover:bg-[var(--color-primary)] hover:text-white transition-all"
              >
                Details
              </a>
              {project.live_url && (
                <a
                  href={project.live_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="px-4 py-2 bg-[var(--color-accent)] text-black rounded hover:bg-opacity-80 transition-all"
                >
                  Live
                </a>
              )}
              {project.code_repo_url && !project.isPrivate && (
                <a
                  href={project.code_repo_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="px-4 py-2 bg-[var(--color-secondary)] text-black rounded hover:bg-opacity-80 transition-all"
                >
                  Code
                </a>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  /* Essential styles for projects page */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .filter-btn.active {
    background-color: var(--color-primary) !important;
    color: white !important;
    border-color: var(--color-primary) !important;
  }

  .filter-btn {
    transition: background-color var(--transition-fast),
                border-color var(--transition-fast),
                color var(--transition-fast);
  }

  .project-card {
    position: relative;
    contain: layout style;
    /* Removed hover effects for performance */
  }

  .project-card.hidden {
    display: none;
  }

  /* Simple fade-in animation */
  .project-card {
    animation: fadeIn 0.3s ease forwards;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style>

<script>
  // Lightweight project filtering
  function initFiltering() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');

    function filterProjects(filter) {
      projectCards.forEach(card => {
        const shouldShow = filter === 'all' || card.classList.contains(filter);
        card.classList.toggle('hidden', !shouldShow);
      });
    }

    // Simple event delegation
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!target || !target.classList.contains('filter-btn')) return;

      // Update active state
      filterBtns.forEach(btn => btn.classList.remove('active'));
      target.classList.add('active');

      // Filter projects
      const filter = target.getAttribute('data-filter') || 'all';
      filterProjects(filter);
    });
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFiltering);
  } else {
    initFiltering();
  }

  document.addEventListener('astro:page-load', initFiltering);
</script>